/* automatically generated by rust-bindgen 0.54.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const CL_CHAR_BIT: u32 = 8;
pub const CL_SCHAR_MAX: u32 = 127;
pub const CL_SCHAR_MIN: i32 = -128;
pub const CL_CHAR_MAX: u32 = 127;
pub const CL_CHAR_MIN: i32 = -128;
pub const CL_UCHAR_MAX: u32 = 255;
pub const CL_SHRT_MAX: u32 = 32767;
pub const CL_SHRT_MIN: i32 = -32768;
pub const CL_USHRT_MAX: u32 = 65535;
pub const CL_INT_MAX: u32 = 2147483647;
pub const CL_INT_MIN: i32 = -2147483648;
pub const CL_UINT_MAX: u32 = 4294967295;
pub const CL_FLT_DIG: u32 = 6;
pub const CL_FLT_MANT_DIG: u32 = 24;
pub const CL_FLT_MAX_10_EXP: u32 = 38;
pub const CL_FLT_MAX_EXP: u32 = 128;
pub const CL_FLT_MIN_10_EXP: i32 = -37;
pub const CL_FLT_MIN_EXP: i32 = -125;
pub const CL_FLT_RADIX: u32 = 2;
pub const CL_FLT_MAX: f64 = 340282346638528860000000000000000000000.0;
pub const CL_HALF_DIG: u32 = 3;
pub const CL_HALF_MANT_DIG: u32 = 11;
pub const CL_HALF_MAX_10_EXP: u32 = 4;
pub const CL_HALF_MAX_EXP: u32 = 16;
pub const CL_HALF_MIN_10_EXP: i32 = -4;
pub const CL_HALF_MIN_EXP: i32 = -13;
pub const CL_HALF_RADIX: u32 = 2;
pub const CL_HALF_MAX: f64 = 65504.0;
pub const CL_DBL_DIG: u32 = 15;
pub const CL_DBL_MANT_DIG: u32 = 53;
pub const CL_DBL_MAX_10_EXP: u32 = 308;
pub const CL_DBL_MAX_EXP: u32 = 1024;
pub const CL_DBL_MIN_10_EXP: i32 = -307;
pub const CL_DBL_MIN_EXP: i32 = -1021;
pub const CL_DBL_RADIX: u32 = 2;
pub const CL_DBL_MAX : f64 = 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const CL_M_E: f64 = 2.718281828459045;
pub const CL_M_LOG2E: f64 = 1.4426950408889634;
pub const CL_M_LOG10E: f64 = 0.4342944819032518;
pub const CL_M_LN2: f64 = 0.6931471805599453;
pub const CL_M_LN10: f64 = 2.302585092994046;
pub const CL_M_PI: f64 = 3.141592653589793;
pub const CL_M_PI_2: f64 = 1.5707963267948966;
pub const CL_M_PI_4: f64 = 0.7853981633974483;
pub const CL_M_1_PI: f64 = 0.3183098861837907;
pub const CL_M_2_PI: f64 = 0.6366197723675814;
pub const CL_M_2_SQRTPI: f64 = 1.1283791670955126;
pub const CL_M_SQRT2: f64 = 1.4142135623730951;
pub const CL_M_SQRT1_2: f64 = 0.7071067811865476;
pub const CL_M_E_F: f64 = 2.718281828;
pub const CL_M_LOG2E_F: f64 = 1.442695041;
pub const CL_M_LOG10E_F: f64 = 0.434294482;
pub const CL_M_LN2_F: f64 = 0.693147181;
pub const CL_M_LN10_F: f64 = 2.302585093;
pub const CL_M_PI_F: f64 = 3.141592654;
pub const CL_M_PI_2_F: f64 = 1.570796327;
pub const CL_M_PI_4_F: f64 = 0.785398163;
pub const CL_M_1_PI_F: f64 = 0.318309886;
pub const CL_M_2_PI_F: f64 = 0.636619772;
pub const CL_M_2_SQRTPI_F: f64 = 1.128379167;
pub const CL_M_SQRT2_F: f64 = 1.414213562;
pub const CL_M_SQRT1_2_F: f64 = 0.707106781;
pub const CL_MAXFLOAT: f64 = 340282346638528860000000000000000000000.0;
pub const _GLIBCXX_STDLIB_H: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 7;
pub const __GLIBCXX__: u32 = 20191114;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
pub const STDC_HEADERS: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INT128: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _MM_HINT_ET0: u32 = 7;
pub const _MM_HINT_ET1: u32 = 6;
pub const _MM_HINT_T0: u32 = 3;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 1;
pub const _MM_HINT_NTA: u32 = 0;
pub const _MM_EXCEPT_INVALID: u32 = 1;
pub const _MM_EXCEPT_DENORM: u32 = 2;
pub const _MM_EXCEPT_DIV_ZERO: u32 = 4;
pub const _MM_EXCEPT_OVERFLOW: u32 = 8;
pub const _MM_EXCEPT_UNDERFLOW: u32 = 16;
pub const _MM_EXCEPT_INEXACT: u32 = 32;
pub const _MM_EXCEPT_MASK: u32 = 63;
pub const _MM_MASK_INVALID: u32 = 128;
pub const _MM_MASK_DENORM: u32 = 256;
pub const _MM_MASK_DIV_ZERO: u32 = 512;
pub const _MM_MASK_OVERFLOW: u32 = 1024;
pub const _MM_MASK_UNDERFLOW: u32 = 2048;
pub const _MM_MASK_INEXACT: u32 = 4096;
pub const _MM_MASK_MASK: u32 = 8064;
pub const _MM_ROUND_NEAREST: u32 = 0;
pub const _MM_ROUND_DOWN: u32 = 8192;
pub const _MM_ROUND_UP: u32 = 16384;
pub const _MM_ROUND_TOWARD_ZERO: u32 = 24576;
pub const _MM_ROUND_MASK: u32 = 24576;
pub const _MM_FLUSH_ZERO_MASK: u32 = 32768;
pub const _MM_FLUSH_ZERO_ON: u32 = 32768;
pub const _MM_FLUSH_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_ON: u32 = 64;
pub const _MM_DENORMALS_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_MASK: u32 = 64;
pub const __CL_FLOAT4__: u32 = 1;
pub const __CL_UCHAR16__: u32 = 1;
pub const __CL_CHAR16__: u32 = 1;
pub const __CL_USHORT8__: u32 = 1;
pub const __CL_SHORT8__: u32 = 1;
pub const __CL_INT4__: u32 = 1;
pub const __CL_UINT4__: u32 = 1;
pub const __CL_ULONG2__: u32 = 1;
pub const __CL_LONG2__: u32 = 1;
pub const __CL_DOUBLE2__: u32 = 1;
pub const __CL_UCHAR8__: u32 = 1;
pub const __CL_CHAR8__: u32 = 1;
pub const __CL_USHORT4__: u32 = 1;
pub const __CL_SHORT4__: u32 = 1;
pub const __CL_INT2__: u32 = 1;
pub const __CL_UINT2__: u32 = 1;
pub const __CL_ULONG1__: u32 = 1;
pub const __CL_LONG1__: u32 = 1;
pub const __CL_FLOAT2__: u32 = 1;
pub const __CL_HAS_ANON_STRUCT__: u32 = 0;
pub const CL_SUCCESS: u32 = 0;
pub const CL_DEVICE_NOT_FOUND: i32 = -1;
pub const CL_DEVICE_NOT_AVAILABLE: i32 = -2;
pub const CL_COMPILER_NOT_AVAILABLE: i32 = -3;
pub const CL_MEM_OBJECT_ALLOCATION_FAILURE: i32 = -4;
pub const CL_OUT_OF_RESOURCES: i32 = -5;
pub const CL_OUT_OF_HOST_MEMORY: i32 = -6;
pub const CL_PROFILING_INFO_NOT_AVAILABLE: i32 = -7;
pub const CL_MEM_COPY_OVERLAP: i32 = -8;
pub const CL_IMAGE_FORMAT_MISMATCH: i32 = -9;
pub const CL_IMAGE_FORMAT_NOT_SUPPORTED: i32 = -10;
pub const CL_BUILD_PROGRAM_FAILURE: i32 = -11;
pub const CL_MAP_FAILURE: i32 = -12;
pub const CL_MISALIGNED_SUB_BUFFER_OFFSET: i32 = -13;
pub const CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST: i32 = -14;
pub const CL_COMPILE_PROGRAM_FAILURE: i32 = -15;
pub const CL_LINKER_NOT_AVAILABLE: i32 = -16;
pub const CL_LINK_PROGRAM_FAILURE: i32 = -17;
pub const CL_DEVICE_PARTITION_FAILED: i32 = -18;
pub const CL_KERNEL_ARG_INFO_NOT_AVAILABLE: i32 = -19;
pub const CL_INVALID_VALUE: i32 = -30;
pub const CL_INVALID_DEVICE_TYPE: i32 = -31;
pub const CL_INVALID_PLATFORM: i32 = -32;
pub const CL_INVALID_DEVICE: i32 = -33;
pub const CL_INVALID_CONTEXT: i32 = -34;
pub const CL_INVALID_QUEUE_PROPERTIES: i32 = -35;
pub const CL_INVALID_COMMAND_QUEUE: i32 = -36;
pub const CL_INVALID_HOST_PTR: i32 = -37;
pub const CL_INVALID_MEM_OBJECT: i32 = -38;
pub const CL_INVALID_IMAGE_FORMAT_DESCRIPTOR: i32 = -39;
pub const CL_INVALID_IMAGE_SIZE: i32 = -40;
pub const CL_INVALID_SAMPLER: i32 = -41;
pub const CL_INVALID_BINARY: i32 = -42;
pub const CL_INVALID_BUILD_OPTIONS: i32 = -43;
pub const CL_INVALID_PROGRAM: i32 = -44;
pub const CL_INVALID_PROGRAM_EXECUTABLE: i32 = -45;
pub const CL_INVALID_KERNEL_NAME: i32 = -46;
pub const CL_INVALID_KERNEL_DEFINITION: i32 = -47;
pub const CL_INVALID_KERNEL: i32 = -48;
pub const CL_INVALID_ARG_INDEX: i32 = -49;
pub const CL_INVALID_ARG_VALUE: i32 = -50;
pub const CL_INVALID_ARG_SIZE: i32 = -51;
pub const CL_INVALID_KERNEL_ARGS: i32 = -52;
pub const CL_INVALID_WORK_DIMENSION: i32 = -53;
pub const CL_INVALID_WORK_GROUP_SIZE: i32 = -54;
pub const CL_INVALID_WORK_ITEM_SIZE: i32 = -55;
pub const CL_INVALID_GLOBAL_OFFSET: i32 = -56;
pub const CL_INVALID_EVENT_WAIT_LIST: i32 = -57;
pub const CL_INVALID_EVENT: i32 = -58;
pub const CL_INVALID_OPERATION: i32 = -59;
pub const CL_INVALID_GL_OBJECT: i32 = -60;
pub const CL_INVALID_BUFFER_SIZE: i32 = -61;
pub const CL_INVALID_MIP_LEVEL: i32 = -62;
pub const CL_INVALID_GLOBAL_WORK_SIZE: i32 = -63;
pub const CL_INVALID_PROPERTY: i32 = -64;
pub const CL_INVALID_IMAGE_DESCRIPTOR: i32 = -65;
pub const CL_INVALID_COMPILER_OPTIONS: i32 = -66;
pub const CL_INVALID_LINKER_OPTIONS: i32 = -67;
pub const CL_INVALID_DEVICE_PARTITION_COUNT: i32 = -68;
pub const CL_INVALID_PIPE_SIZE: i32 = -69;
pub const CL_INVALID_DEVICE_QUEUE: i32 = -70;
pub const CL_INVALID_SPEC_ID: i32 = -71;
pub const CL_MAX_SIZE_RESTRICTION_EXCEEDED: i32 = -72;
pub const CL_VERSION_1_0: u32 = 1;
pub const CL_VERSION_1_1: u32 = 1;
pub const CL_VERSION_1_2: u32 = 1;
pub const CL_VERSION_2_0: u32 = 1;
pub const CL_VERSION_2_1: u32 = 1;
pub const CL_VERSION_2_2: u32 = 1;
pub const CL_FALSE: u32 = 0;
pub const CL_TRUE: u32 = 1;
pub const CL_BLOCKING: u32 = 1;
pub const CL_NON_BLOCKING: u32 = 0;
pub const CL_PLATFORM_PROFILE: u32 = 2304;
pub const CL_PLATFORM_VERSION: u32 = 2305;
pub const CL_PLATFORM_NAME: u32 = 2306;
pub const CL_PLATFORM_VENDOR: u32 = 2307;
pub const CL_PLATFORM_EXTENSIONS: u32 = 2308;
pub const CL_PLATFORM_HOST_TIMER_RESOLUTION: u32 = 2309;
pub const CL_DEVICE_TYPE_DEFAULT: u32 = 1;
pub const CL_DEVICE_TYPE_CPU: u32 = 2;
pub const CL_DEVICE_TYPE_GPU: u32 = 4;
pub const CL_DEVICE_TYPE_ACCELERATOR: u32 = 8;
pub const CL_DEVICE_TYPE_CUSTOM: u32 = 16;
pub const CL_DEVICE_TYPE_ALL: u32 = 4294967295;
pub const CL_DEVICE_TYPE: u32 = 4096;
pub const CL_DEVICE_VENDOR_ID: u32 = 4097;
pub const CL_DEVICE_MAX_COMPUTE_UNITS: u32 = 4098;
pub const CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS: u32 = 4099;
pub const CL_DEVICE_MAX_WORK_GROUP_SIZE: u32 = 4100;
pub const CL_DEVICE_MAX_WORK_ITEM_SIZES: u32 = 4101;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR: u32 = 4102;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT: u32 = 4103;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT: u32 = 4104;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG: u32 = 4105;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT: u32 = 4106;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE: u32 = 4107;
pub const CL_DEVICE_MAX_CLOCK_FREQUENCY: u32 = 4108;
pub const CL_DEVICE_ADDRESS_BITS: u32 = 4109;
pub const CL_DEVICE_MAX_READ_IMAGE_ARGS: u32 = 4110;
pub const CL_DEVICE_MAX_WRITE_IMAGE_ARGS: u32 = 4111;
pub const CL_DEVICE_MAX_MEM_ALLOC_SIZE: u32 = 4112;
pub const CL_DEVICE_IMAGE2D_MAX_WIDTH: u32 = 4113;
pub const CL_DEVICE_IMAGE2D_MAX_HEIGHT: u32 = 4114;
pub const CL_DEVICE_IMAGE3D_MAX_WIDTH: u32 = 4115;
pub const CL_DEVICE_IMAGE3D_MAX_HEIGHT: u32 = 4116;
pub const CL_DEVICE_IMAGE3D_MAX_DEPTH: u32 = 4117;
pub const CL_DEVICE_IMAGE_SUPPORT: u32 = 4118;
pub const CL_DEVICE_MAX_PARAMETER_SIZE: u32 = 4119;
pub const CL_DEVICE_MAX_SAMPLERS: u32 = 4120;
pub const CL_DEVICE_MEM_BASE_ADDR_ALIGN: u32 = 4121;
pub const CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE: u32 = 4122;
pub const CL_DEVICE_SINGLE_FP_CONFIG: u32 = 4123;
pub const CL_DEVICE_GLOBAL_MEM_CACHE_TYPE: u32 = 4124;
pub const CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE: u32 = 4125;
pub const CL_DEVICE_GLOBAL_MEM_CACHE_SIZE: u32 = 4126;
pub const CL_DEVICE_GLOBAL_MEM_SIZE: u32 = 4127;
pub const CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE: u32 = 4128;
pub const CL_DEVICE_MAX_CONSTANT_ARGS: u32 = 4129;
pub const CL_DEVICE_LOCAL_MEM_TYPE: u32 = 4130;
pub const CL_DEVICE_LOCAL_MEM_SIZE: u32 = 4131;
pub const CL_DEVICE_ERROR_CORRECTION_SUPPORT: u32 = 4132;
pub const CL_DEVICE_PROFILING_TIMER_RESOLUTION: u32 = 4133;
pub const CL_DEVICE_ENDIAN_LITTLE: u32 = 4134;
pub const CL_DEVICE_AVAILABLE: u32 = 4135;
pub const CL_DEVICE_COMPILER_AVAILABLE: u32 = 4136;
pub const CL_DEVICE_EXECUTION_CAPABILITIES: u32 = 4137;
pub const CL_DEVICE_QUEUE_PROPERTIES: u32 = 4138;
pub const CL_DEVICE_QUEUE_ON_HOST_PROPERTIES: u32 = 4138;
pub const CL_DEVICE_NAME: u32 = 4139;
pub const CL_DEVICE_VENDOR: u32 = 4140;
pub const CL_DRIVER_VERSION: u32 = 4141;
pub const CL_DEVICE_PROFILE: u32 = 4142;
pub const CL_DEVICE_VERSION: u32 = 4143;
pub const CL_DEVICE_EXTENSIONS: u32 = 4144;
pub const CL_DEVICE_PLATFORM: u32 = 4145;
pub const CL_DEVICE_DOUBLE_FP_CONFIG: u32 = 4146;
pub const CL_DEVICE_HALF_FP_CONFIG: u32 = 4147;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF: u32 = 4148;
pub const CL_DEVICE_HOST_UNIFIED_MEMORY: u32 = 4149;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR: u32 = 4150;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT: u32 = 4151;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_INT: u32 = 4152;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG: u32 = 4153;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT: u32 = 4154;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE: u32 = 4155;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF: u32 = 4156;
pub const CL_DEVICE_OPENCL_C_VERSION: u32 = 4157;
pub const CL_DEVICE_LINKER_AVAILABLE: u32 = 4158;
pub const CL_DEVICE_BUILT_IN_KERNELS: u32 = 4159;
pub const CL_DEVICE_IMAGE_MAX_BUFFER_SIZE: u32 = 4160;
pub const CL_DEVICE_IMAGE_MAX_ARRAY_SIZE: u32 = 4161;
pub const CL_DEVICE_PARENT_DEVICE: u32 = 4162;
pub const CL_DEVICE_PARTITION_MAX_SUB_DEVICES: u32 = 4163;
pub const CL_DEVICE_PARTITION_PROPERTIES: u32 = 4164;
pub const CL_DEVICE_PARTITION_AFFINITY_DOMAIN: u32 = 4165;
pub const CL_DEVICE_PARTITION_TYPE: u32 = 4166;
pub const CL_DEVICE_REFERENCE_COUNT: u32 = 4167;
pub const CL_DEVICE_PREFERRED_INTEROP_USER_SYNC: u32 = 4168;
pub const CL_DEVICE_PRINTF_BUFFER_SIZE: u32 = 4169;
pub const CL_DEVICE_IMAGE_PITCH_ALIGNMENT: u32 = 4170;
pub const CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT: u32 = 4171;
pub const CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS: u32 = 4172;
pub const CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE: u32 = 4173;
pub const CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES: u32 = 4174;
pub const CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE: u32 = 4175;
pub const CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE: u32 = 4176;
pub const CL_DEVICE_MAX_ON_DEVICE_QUEUES: u32 = 4177;
pub const CL_DEVICE_MAX_ON_DEVICE_EVENTS: u32 = 4178;
pub const CL_DEVICE_SVM_CAPABILITIES: u32 = 4179;
pub const CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE: u32 = 4180;
pub const CL_DEVICE_MAX_PIPE_ARGS: u32 = 4181;
pub const CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS: u32 = 4182;
pub const CL_DEVICE_PIPE_MAX_PACKET_SIZE: u32 = 4183;
pub const CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT: u32 = 4184;
pub const CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT: u32 = 4185;
pub const CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT: u32 = 4186;
pub const CL_DEVICE_IL_VERSION: u32 = 4187;
pub const CL_DEVICE_MAX_NUM_SUB_GROUPS: u32 = 4188;
pub const CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS: u32 = 4189;
pub const CL_FP_DENORM: u32 = 1;
pub const CL_FP_INF_NAN: u32 = 2;
pub const CL_FP_ROUND_TO_NEAREST: u32 = 4;
pub const CL_FP_ROUND_TO_ZERO: u32 = 8;
pub const CL_FP_ROUND_TO_INF: u32 = 16;
pub const CL_FP_FMA: u32 = 32;
pub const CL_FP_SOFT_FLOAT: u32 = 64;
pub const CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT: u32 = 128;
pub const CL_NONE: u32 = 0;
pub const CL_READ_ONLY_CACHE: u32 = 1;
pub const CL_READ_WRITE_CACHE: u32 = 2;
pub const CL_LOCAL: u32 = 1;
pub const CL_GLOBAL: u32 = 2;
pub const CL_EXEC_KERNEL: u32 = 1;
pub const CL_EXEC_NATIVE_KERNEL: u32 = 2;
pub const CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE: u32 = 1;
pub const CL_QUEUE_PROFILING_ENABLE: u32 = 2;
pub const CL_QUEUE_ON_DEVICE: u32 = 4;
pub const CL_QUEUE_ON_DEVICE_DEFAULT: u32 = 8;
pub const CL_CONTEXT_REFERENCE_COUNT: u32 = 4224;
pub const CL_CONTEXT_DEVICES: u32 = 4225;
pub const CL_CONTEXT_PROPERTIES: u32 = 4226;
pub const CL_CONTEXT_NUM_DEVICES: u32 = 4227;
pub const CL_CONTEXT_PLATFORM: u32 = 4228;
pub const CL_CONTEXT_INTEROP_USER_SYNC: u32 = 4229;
pub const CL_DEVICE_PARTITION_EQUALLY: u32 = 4230;
pub const CL_DEVICE_PARTITION_BY_COUNTS: u32 = 4231;
pub const CL_DEVICE_PARTITION_BY_COUNTS_LIST_END: u32 = 0;
pub const CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN: u32 = 4232;
pub const CL_DEVICE_AFFINITY_DOMAIN_NUMA: u32 = 1;
pub const CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE: u32 = 2;
pub const CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE: u32 = 4;
pub const CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE: u32 = 8;
pub const CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE: u32 = 16;
pub const CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE: u32 = 32;
pub const CL_DEVICE_SVM_COARSE_GRAIN_BUFFER: u32 = 1;
pub const CL_DEVICE_SVM_FINE_GRAIN_BUFFER: u32 = 2;
pub const CL_DEVICE_SVM_FINE_GRAIN_SYSTEM: u32 = 4;
pub const CL_DEVICE_SVM_ATOMICS: u32 = 8;
pub const CL_QUEUE_CONTEXT: u32 = 4240;
pub const CL_QUEUE_DEVICE: u32 = 4241;
pub const CL_QUEUE_REFERENCE_COUNT: u32 = 4242;
pub const CL_QUEUE_PROPERTIES: u32 = 4243;
pub const CL_QUEUE_SIZE: u32 = 4244;
pub const CL_QUEUE_DEVICE_DEFAULT: u32 = 4245;
pub const CL_MEM_READ_WRITE: u32 = 1;
pub const CL_MEM_WRITE_ONLY: u32 = 2;
pub const CL_MEM_READ_ONLY: u32 = 4;
pub const CL_MEM_USE_HOST_PTR: u32 = 8;
pub const CL_MEM_ALLOC_HOST_PTR: u32 = 16;
pub const CL_MEM_COPY_HOST_PTR: u32 = 32;
pub const CL_MEM_HOST_WRITE_ONLY: u32 = 128;
pub const CL_MEM_HOST_READ_ONLY: u32 = 256;
pub const CL_MEM_HOST_NO_ACCESS: u32 = 512;
pub const CL_MEM_SVM_FINE_GRAIN_BUFFER: u32 = 1024;
pub const CL_MEM_SVM_ATOMICS: u32 = 2048;
pub const CL_MEM_KERNEL_READ_AND_WRITE: u32 = 4096;
pub const CL_MIGRATE_MEM_OBJECT_HOST: u32 = 1;
pub const CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED: u32 = 2;
pub const CL_R: u32 = 4272;
pub const CL_A: u32 = 4273;
pub const CL_RG: u32 = 4274;
pub const CL_RA: u32 = 4275;
pub const CL_RGB: u32 = 4276;
pub const CL_RGBA: u32 = 4277;
pub const CL_BGRA: u32 = 4278;
pub const CL_ARGB: u32 = 4279;
pub const CL_INTENSITY: u32 = 4280;
pub const CL_LUMINANCE: u32 = 4281;
pub const CL_Rx: u32 = 4282;
pub const CL_RGx: u32 = 4283;
pub const CL_RGBx: u32 = 4284;
pub const CL_DEPTH: u32 = 4285;
pub const CL_DEPTH_STENCIL: u32 = 4286;
pub const CL_sRGB: u32 = 4287;
pub const CL_sRGBx: u32 = 4288;
pub const CL_sRGBA: u32 = 4289;
pub const CL_sBGRA: u32 = 4290;
pub const CL_ABGR: u32 = 4291;
pub const CL_SNORM_INT8: u32 = 4304;
pub const CL_SNORM_INT16: u32 = 4305;
pub const CL_UNORM_INT8: u32 = 4306;
pub const CL_UNORM_INT16: u32 = 4307;
pub const CL_UNORM_SHORT_565: u32 = 4308;
pub const CL_UNORM_SHORT_555: u32 = 4309;
pub const CL_UNORM_INT_101010: u32 = 4310;
pub const CL_SIGNED_INT8: u32 = 4311;
pub const CL_SIGNED_INT16: u32 = 4312;
pub const CL_SIGNED_INT32: u32 = 4313;
pub const CL_UNSIGNED_INT8: u32 = 4314;
pub const CL_UNSIGNED_INT16: u32 = 4315;
pub const CL_UNSIGNED_INT32: u32 = 4316;
pub const CL_HALF_FLOAT: u32 = 4317;
pub const CL_FLOAT: u32 = 4318;
pub const CL_UNORM_INT24: u32 = 4319;
pub const CL_UNORM_INT_101010_2: u32 = 4320;
pub const CL_MEM_OBJECT_BUFFER: u32 = 4336;
pub const CL_MEM_OBJECT_IMAGE2D: u32 = 4337;
pub const CL_MEM_OBJECT_IMAGE3D: u32 = 4338;
pub const CL_MEM_OBJECT_IMAGE2D_ARRAY: u32 = 4339;
pub const CL_MEM_OBJECT_IMAGE1D: u32 = 4340;
pub const CL_MEM_OBJECT_IMAGE1D_ARRAY: u32 = 4341;
pub const CL_MEM_OBJECT_IMAGE1D_BUFFER: u32 = 4342;
pub const CL_MEM_OBJECT_PIPE: u32 = 4343;
pub const CL_MEM_TYPE: u32 = 4352;
pub const CL_MEM_FLAGS: u32 = 4353;
pub const CL_MEM_SIZE: u32 = 4354;
pub const CL_MEM_HOST_PTR: u32 = 4355;
pub const CL_MEM_MAP_COUNT: u32 = 4356;
pub const CL_MEM_REFERENCE_COUNT: u32 = 4357;
pub const CL_MEM_CONTEXT: u32 = 4358;
pub const CL_MEM_ASSOCIATED_MEMOBJECT: u32 = 4359;
pub const CL_MEM_OFFSET: u32 = 4360;
pub const CL_MEM_USES_SVM_POINTER: u32 = 4361;
pub const CL_IMAGE_FORMAT: u32 = 4368;
pub const CL_IMAGE_ELEMENT_SIZE: u32 = 4369;
pub const CL_IMAGE_ROW_PITCH: u32 = 4370;
pub const CL_IMAGE_SLICE_PITCH: u32 = 4371;
pub const CL_IMAGE_WIDTH: u32 = 4372;
pub const CL_IMAGE_HEIGHT: u32 = 4373;
pub const CL_IMAGE_DEPTH: u32 = 4374;
pub const CL_IMAGE_ARRAY_SIZE: u32 = 4375;
pub const CL_IMAGE_BUFFER: u32 = 4376;
pub const CL_IMAGE_NUM_MIP_LEVELS: u32 = 4377;
pub const CL_IMAGE_NUM_SAMPLES: u32 = 4378;
pub const CL_PIPE_PACKET_SIZE: u32 = 4384;
pub const CL_PIPE_MAX_PACKETS: u32 = 4385;
pub const CL_ADDRESS_NONE: u32 = 4400;
pub const CL_ADDRESS_CLAMP_TO_EDGE: u32 = 4401;
pub const CL_ADDRESS_CLAMP: u32 = 4402;
pub const CL_ADDRESS_REPEAT: u32 = 4403;
pub const CL_ADDRESS_MIRRORED_REPEAT: u32 = 4404;
pub const CL_FILTER_NEAREST: u32 = 4416;
pub const CL_FILTER_LINEAR: u32 = 4417;
pub const CL_SAMPLER_REFERENCE_COUNT: u32 = 4432;
pub const CL_SAMPLER_CONTEXT: u32 = 4433;
pub const CL_SAMPLER_NORMALIZED_COORDS: u32 = 4434;
pub const CL_SAMPLER_ADDRESSING_MODE: u32 = 4435;
pub const CL_SAMPLER_FILTER_MODE: u32 = 4436;
pub const CL_SAMPLER_MIP_FILTER_MODE: u32 = 4437;
pub const CL_SAMPLER_LOD_MIN: u32 = 4438;
pub const CL_SAMPLER_LOD_MAX: u32 = 4439;
pub const CL_MAP_READ: u32 = 1;
pub const CL_MAP_WRITE: u32 = 2;
pub const CL_MAP_WRITE_INVALIDATE_REGION: u32 = 4;
pub const CL_PROGRAM_REFERENCE_COUNT: u32 = 4448;
pub const CL_PROGRAM_CONTEXT: u32 = 4449;
pub const CL_PROGRAM_NUM_DEVICES: u32 = 4450;
pub const CL_PROGRAM_DEVICES: u32 = 4451;
pub const CL_PROGRAM_SOURCE: u32 = 4452;
pub const CL_PROGRAM_BINARY_SIZES: u32 = 4453;
pub const CL_PROGRAM_BINARIES: u32 = 4454;
pub const CL_PROGRAM_NUM_KERNELS: u32 = 4455;
pub const CL_PROGRAM_KERNEL_NAMES: u32 = 4456;
pub const CL_PROGRAM_IL: u32 = 4457;
pub const CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT: u32 = 4458;
pub const CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT: u32 = 4459;
pub const CL_PROGRAM_BUILD_STATUS: u32 = 4481;
pub const CL_PROGRAM_BUILD_OPTIONS: u32 = 4482;
pub const CL_PROGRAM_BUILD_LOG: u32 = 4483;
pub const CL_PROGRAM_BINARY_TYPE: u32 = 4484;
pub const CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE: u32 = 4485;
pub const CL_PROGRAM_BINARY_TYPE_NONE: u32 = 0;
pub const CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT: u32 = 1;
pub const CL_PROGRAM_BINARY_TYPE_LIBRARY: u32 = 2;
pub const CL_PROGRAM_BINARY_TYPE_EXECUTABLE: u32 = 4;
pub const CL_BUILD_SUCCESS: u32 = 0;
pub const CL_BUILD_NONE: i32 = -1;
pub const CL_BUILD_ERROR: i32 = -2;
pub const CL_BUILD_IN_PROGRESS: i32 = -3;
pub const CL_KERNEL_FUNCTION_NAME: u32 = 4496;
pub const CL_KERNEL_NUM_ARGS: u32 = 4497;
pub const CL_KERNEL_REFERENCE_COUNT: u32 = 4498;
pub const CL_KERNEL_CONTEXT: u32 = 4499;
pub const CL_KERNEL_PROGRAM: u32 = 4500;
pub const CL_KERNEL_ATTRIBUTES: u32 = 4501;
pub const CL_KERNEL_MAX_NUM_SUB_GROUPS: u32 = 4537;
pub const CL_KERNEL_COMPILE_NUM_SUB_GROUPS: u32 = 4538;
pub const CL_KERNEL_ARG_ADDRESS_QUALIFIER: u32 = 4502;
pub const CL_KERNEL_ARG_ACCESS_QUALIFIER: u32 = 4503;
pub const CL_KERNEL_ARG_TYPE_NAME: u32 = 4504;
pub const CL_KERNEL_ARG_TYPE_QUALIFIER: u32 = 4505;
pub const CL_KERNEL_ARG_NAME: u32 = 4506;
pub const CL_KERNEL_ARG_ADDRESS_GLOBAL: u32 = 4507;
pub const CL_KERNEL_ARG_ADDRESS_LOCAL: u32 = 4508;
pub const CL_KERNEL_ARG_ADDRESS_CONSTANT: u32 = 4509;
pub const CL_KERNEL_ARG_ADDRESS_PRIVATE: u32 = 4510;
pub const CL_KERNEL_ARG_ACCESS_READ_ONLY: u32 = 4512;
pub const CL_KERNEL_ARG_ACCESS_WRITE_ONLY: u32 = 4513;
pub const CL_KERNEL_ARG_ACCESS_READ_WRITE: u32 = 4514;
pub const CL_KERNEL_ARG_ACCESS_NONE: u32 = 4515;
pub const CL_KERNEL_ARG_TYPE_NONE: u32 = 0;
pub const CL_KERNEL_ARG_TYPE_CONST: u32 = 1;
pub const CL_KERNEL_ARG_TYPE_RESTRICT: u32 = 2;
pub const CL_KERNEL_ARG_TYPE_VOLATILE: u32 = 4;
pub const CL_KERNEL_ARG_TYPE_PIPE: u32 = 8;
pub const CL_KERNEL_WORK_GROUP_SIZE: u32 = 4528;
pub const CL_KERNEL_COMPILE_WORK_GROUP_SIZE: u32 = 4529;
pub const CL_KERNEL_LOCAL_MEM_SIZE: u32 = 4530;
pub const CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE: u32 = 4531;
pub const CL_KERNEL_PRIVATE_MEM_SIZE: u32 = 4532;
pub const CL_KERNEL_GLOBAL_WORK_SIZE: u32 = 4533;
pub const CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE: u32 = 8243;
pub const CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE: u32 = 8244;
pub const CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT: u32 = 4536;
pub const CL_KERNEL_EXEC_INFO_SVM_PTRS: u32 = 4534;
pub const CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM: u32 = 4535;
pub const CL_EVENT_COMMAND_QUEUE: u32 = 4560;
pub const CL_EVENT_COMMAND_TYPE: u32 = 4561;
pub const CL_EVENT_REFERENCE_COUNT: u32 = 4562;
pub const CL_EVENT_COMMAND_EXECUTION_STATUS: u32 = 4563;
pub const CL_EVENT_CONTEXT: u32 = 4564;
pub const CL_COMMAND_NDRANGE_KERNEL: u32 = 4592;
pub const CL_COMMAND_TASK: u32 = 4593;
pub const CL_COMMAND_NATIVE_KERNEL: u32 = 4594;
pub const CL_COMMAND_READ_BUFFER: u32 = 4595;
pub const CL_COMMAND_WRITE_BUFFER: u32 = 4596;
pub const CL_COMMAND_COPY_BUFFER: u32 = 4597;
pub const CL_COMMAND_READ_IMAGE: u32 = 4598;
pub const CL_COMMAND_WRITE_IMAGE: u32 = 4599;
pub const CL_COMMAND_COPY_IMAGE: u32 = 4600;
pub const CL_COMMAND_COPY_IMAGE_TO_BUFFER: u32 = 4601;
pub const CL_COMMAND_COPY_BUFFER_TO_IMAGE: u32 = 4602;
pub const CL_COMMAND_MAP_BUFFER: u32 = 4603;
pub const CL_COMMAND_MAP_IMAGE: u32 = 4604;
pub const CL_COMMAND_UNMAP_MEM_OBJECT: u32 = 4605;
pub const CL_COMMAND_MARKER: u32 = 4606;
pub const CL_COMMAND_ACQUIRE_GL_OBJECTS: u32 = 4607;
pub const CL_COMMAND_RELEASE_GL_OBJECTS: u32 = 4608;
pub const CL_COMMAND_READ_BUFFER_RECT: u32 = 4609;
pub const CL_COMMAND_WRITE_BUFFER_RECT: u32 = 4610;
pub const CL_COMMAND_COPY_BUFFER_RECT: u32 = 4611;
pub const CL_COMMAND_USER: u32 = 4612;
pub const CL_COMMAND_BARRIER: u32 = 4613;
pub const CL_COMMAND_MIGRATE_MEM_OBJECTS: u32 = 4614;
pub const CL_COMMAND_FILL_BUFFER: u32 = 4615;
pub const CL_COMMAND_FILL_IMAGE: u32 = 4616;
pub const CL_COMMAND_SVM_FREE: u32 = 4617;
pub const CL_COMMAND_SVM_MEMCPY: u32 = 4618;
pub const CL_COMMAND_SVM_MEMFILL: u32 = 4619;
pub const CL_COMMAND_SVM_MAP: u32 = 4620;
pub const CL_COMMAND_SVM_UNMAP: u32 = 4621;
pub const CL_COMPLETE: u32 = 0;
pub const CL_RUNNING: u32 = 1;
pub const CL_SUBMITTED: u32 = 2;
pub const CL_QUEUED: u32 = 3;
pub const CL_BUFFER_CREATE_TYPE_REGION: u32 = 4640;
pub const CL_PROFILING_COMMAND_QUEUED: u32 = 4736;
pub const CL_PROFILING_COMMAND_SUBMIT: u32 = 4737;
pub const CL_PROFILING_COMMAND_START: u32 = 4738;
pub const CL_PROFILING_COMMAND_END: u32 = 4739;
pub const CL_PROFILING_COMMAND_COMPLETE: u32 = 4740;
pub const CL_GL_OBJECT_BUFFER: u32 = 8192;
pub const CL_GL_OBJECT_TEXTURE2D: u32 = 8193;
pub const CL_GL_OBJECT_TEXTURE3D: u32 = 8194;
pub const CL_GL_OBJECT_RENDERBUFFER: u32 = 8195;
pub const CL_GL_OBJECT_TEXTURE2D_ARRAY: u32 = 8206;
pub const CL_GL_OBJECT_TEXTURE1D: u32 = 8207;
pub const CL_GL_OBJECT_TEXTURE1D_ARRAY: u32 = 8208;
pub const CL_GL_OBJECT_TEXTURE_BUFFER: u32 = 8209;
pub const CL_GL_TEXTURE_TARGET: u32 = 8196;
pub const CL_GL_MIPMAP_LEVEL: u32 = 8197;
pub const CL_GL_NUM_SAMPLES: u32 = 8210;
pub const cl_khr_gl_sharing: u32 = 1;
pub const CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR: i32 = -1000;
pub const CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR: u32 = 8198;
pub const CL_DEVICES_FOR_GL_CONTEXT_KHR: u32 = 8199;
pub const CL_GL_CONTEXT_KHR: u32 = 8200;
pub const CL_EGL_DISPLAY_KHR: u32 = 8201;
pub const CL_GLX_DISPLAY_KHR: u32 = 8202;
pub const CL_WGL_HDC_KHR: u32 = 8203;
pub const CL_CGL_SHAREGROUP_KHR: u32 = 8204;
pub const CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR: u32 = 8205;
pub const cl_APPLE_SetMemObjectDestructor: u32 = 1;
pub const cl_APPLE_ContextLoggingFunctions: u32 = 1;
pub const cl_khr_icd: u32 = 1;
pub const CL_PLATFORM_ICD_SUFFIX_KHR: u32 = 2336;
pub const CL_PLATFORM_NOT_FOUND_KHR: i32 = -1001;
pub const CL_CONTEXT_MEMORY_INITIALIZE_KHR: u32 = 8240;
pub const CL_DEVICE_TERMINATE_CAPABILITY_KHR: u32 = 8241;
pub const CL_CONTEXT_TERMINATE_KHR: u32 = 8242;
pub const cl_khr_terminate_context: u32 = 1;
pub const CL_DEVICE_SPIR_VERSIONS: u32 = 16608;
pub const CL_PROGRAM_BINARY_TYPE_INTERMEDIATE: u32 = 16609;
pub const cl_khr_create_command_queue: u32 = 1;
pub const CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV: u32 = 16384;
pub const CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV: u32 = 16385;
pub const CL_DEVICE_REGISTERS_PER_BLOCK_NV: u32 = 16386;
pub const CL_DEVICE_WARP_SIZE_NV: u32 = 16387;
pub const CL_DEVICE_GPU_OVERLAP_NV: u32 = 16388;
pub const CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV: u32 = 16389;
pub const CL_DEVICE_INTEGRATED_MEMORY_NV: u32 = 16390;
pub const cl_amd_device_memory_flags: u32 = 1;
pub const CL_MEM_USE_PERSISTENT_MEM_AMD: u32 = 64;
pub const CL_DEVICE_MAX_ATOMIC_COUNTERS_EXT: u32 = 16434;
pub const CL_DEVICE_PROFILING_TIMER_OFFSET_AMD: u32 = 16438;
pub const CL_DEVICE_TOPOLOGY_AMD: u32 = 16439;
pub const CL_DEVICE_BOARD_NAME_AMD: u32 = 16440;
pub const CL_DEVICE_GLOBAL_FREE_MEMORY_AMD: u32 = 16441;
pub const CL_DEVICE_SIMD_PER_COMPUTE_UNIT_AMD: u32 = 16448;
pub const CL_DEVICE_SIMD_WIDTH_AMD: u32 = 16449;
pub const CL_DEVICE_SIMD_INSTRUCTION_WIDTH_AMD: u32 = 16450;
pub const CL_DEVICE_WAVEFRONT_WIDTH_AMD: u32 = 16451;
pub const CL_DEVICE_GLOBAL_MEM_CHANNELS_AMD: u32 = 16452;
pub const CL_DEVICE_GLOBAL_MEM_CHANNEL_BANKS_AMD: u32 = 16453;
pub const CL_DEVICE_GLOBAL_MEM_CHANNEL_BANK_WIDTH_AMD: u32 = 16454;
pub const CL_DEVICE_LOCAL_MEM_SIZE_PER_COMPUTE_UNIT_AMD: u32 = 16455;
pub const CL_DEVICE_LOCAL_MEM_BANKS_AMD: u32 = 16456;
pub const CL_DEVICE_TOPOLOGY_TYPE_PCIE_AMD: u32 = 1;
pub const CL_CONTEXT_OFFLINE_DEVICES_AMD: u32 = 16447;
pub const CL_PRINTF_CALLBACK_ARM: u32 = 16560;
pub const CL_PRINTF_BUFFERSIZE_ARM: u32 = 16561;
pub const cl_ext_device_fission: u32 = 1;
pub const CL_DEVICE_PARTITION_EQUALLY_EXT: u32 = 16464;
pub const CL_DEVICE_PARTITION_BY_COUNTS_EXT: u32 = 16465;
pub const CL_DEVICE_PARTITION_BY_NAMES_EXT: u32 = 16466;
pub const CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_EXT: u32 = 16467;
pub const CL_DEVICE_PARENT_DEVICE_EXT: u32 = 16468;
pub const CL_DEVICE_PARTITION_TYPES_EXT: u32 = 16469;
pub const CL_DEVICE_AFFINITY_DOMAINS_EXT: u32 = 16470;
pub const CL_DEVICE_REFERENCE_COUNT_EXT: u32 = 16471;
pub const CL_DEVICE_PARTITION_STYLE_EXT: u32 = 16472;
pub const CL_DEVICE_PARTITION_FAILED_EXT: i32 = -1057;
pub const CL_INVALID_PARTITION_COUNT_EXT: i32 = -1058;
pub const CL_INVALID_PARTITION_NAME_EXT: i32 = -1059;
pub const CL_AFFINITY_DOMAIN_L1_CACHE_EXT: u32 = 1;
pub const CL_AFFINITY_DOMAIN_L2_CACHE_EXT: u32 = 2;
pub const CL_AFFINITY_DOMAIN_L3_CACHE_EXT: u32 = 3;
pub const CL_AFFINITY_DOMAIN_L4_CACHE_EXT: u32 = 4;
pub const CL_AFFINITY_DOMAIN_NUMA_EXT: u32 = 16;
pub const CL_AFFINITY_DOMAIN_NEXT_FISSIONABLE_EXT: u32 = 256;
pub const CL_MEM_EXT_HOST_PTR_QCOM: u32 = 536870912;
pub const CL_DEVICE_EXT_MEM_PADDING_IN_BYTES_QCOM: u32 = 16544;
pub const CL_DEVICE_PAGE_SIZE_QCOM: u32 = 16545;
pub const CL_IMAGE_ROW_ALIGNMENT_QCOM: u32 = 16546;
pub const CL_IMAGE_SLICE_ALIGNMENT_QCOM: u32 = 16547;
pub const CL_MEM_HOST_UNCACHED_QCOM: u32 = 16548;
pub const CL_MEM_HOST_WRITEBACK_QCOM: u32 = 16549;
pub const CL_MEM_HOST_WRITETHROUGH_QCOM: u32 = 16550;
pub const CL_MEM_HOST_WRITE_COMBINING_QCOM: u32 = 16551;
pub const CL_MEM_ION_HOST_PTR_QCOM: u32 = 16552;
pub const CL_NV21_IMG: u32 = 16592;
pub const CL_YV12_IMG: u32 = 16593;
pub const CL_MEM_USE_UNCACHED_CPU_MEMORY_IMG: u32 = 67108864;
pub const CL_MEM_USE_CACHED_CPU_MEMORY_IMG: u32 = 134217728;
pub const CL_MEM_USE_GRALLOC_PTR_IMG: u32 = 268435456;
pub const CL_COMMAND_ACQUIRE_GRALLOC_OBJECTS_IMG: u32 = 16594;
pub const CL_COMMAND_RELEASE_GRALLOC_OBJECTS_IMG: u32 = 16595;
pub const CL_GRALLOC_RESOURCE_NOT_ACQUIRED_IMG: u32 = 16596;
pub const cl_khr_subgroups: u32 = 1;
pub const CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE_KHR: u32 = 8243;
pub const CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE_KHR: u32 = 8244;
pub const cl_khr_priority_hints: u32 = 1;
pub const CL_QUEUE_PRIORITY_KHR: u32 = 4246;
pub const CL_QUEUE_PRIORITY_HIGH_KHR: u32 = 1;
pub const CL_QUEUE_PRIORITY_MED_KHR: u32 = 2;
pub const CL_QUEUE_PRIORITY_LOW_KHR: u32 = 4;
pub const cl_khr_throttle_hints: u32 = 1;
pub const CL_QUEUE_THROTTLE_KHR: u32 = 4247;
pub const CL_QUEUE_THROTTLE_HIGH_KHR: u32 = 1;
pub const CL_QUEUE_THROTTLE_MED_KHR: u32 = 2;
pub const CL_QUEUE_THROTTLE_LOW_KHR: u32 = 4;
pub const cl_khr_subgroup_named_barrier: u32 = 1;
pub const CL_DEVICE_MAX_NAMED_BARRIER_COUNT_KHR: u32 = 8245;
pub const CL_IMPORT_TYPE_ARM: u32 = 16562;
pub const CL_IMPORT_TYPE_HOST_ARM: u32 = 16563;
pub const CL_IMPORT_TYPE_DMA_BUF_ARM: u32 = 16564;
pub const CL_IMPORT_TYPE_SECURE_ARM: u32 = 16565;
pub const CL_DEVICE_SVM_CAPABILITIES_ARM: u32 = 16566;
pub const CL_MEM_USES_SVM_POINTER_ARM: u32 = 16567;
pub const CL_KERNEL_EXEC_INFO_SVM_PTRS_ARM: u32 = 16568;
pub const CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM_ARM: u32 = 16569;
pub const CL_COMMAND_SVM_FREE_ARM: u32 = 16570;
pub const CL_COMMAND_SVM_MEMCPY_ARM: u32 = 16571;
pub const CL_COMMAND_SVM_MEMFILL_ARM: u32 = 16572;
pub const CL_COMMAND_SVM_MAP_ARM: u32 = 16573;
pub const CL_COMMAND_SVM_UNMAP_ARM: u32 = 16574;
pub const CL_DEVICE_SVM_COARSE_GRAIN_BUFFER_ARM: u32 = 1;
pub const CL_DEVICE_SVM_FINE_GRAIN_BUFFER_ARM: u32 = 2;
pub const CL_DEVICE_SVM_FINE_GRAIN_SYSTEM_ARM: u32 = 4;
pub const CL_DEVICE_SVM_ATOMICS_ARM: u32 = 8;
pub const CL_MEM_SVM_FINE_GRAIN_BUFFER_ARM: u32 = 1024;
pub const CL_MEM_SVM_ATOMICS_ARM: u32 = 2048;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_schar;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __intmax_t = ::libc::c_long;
pub type __uintmax_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::libc::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type __sig_atomic_t = ::libc::c_int;
pub type int_least8_t = ::libc::c_schar;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_schar;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type cl_char = i8;
pub type cl_uchar = u8;
pub type cl_short = i16;
pub type cl_ushort = u16;
pub type cl_int = i32;
pub type cl_uint = u32;
pub type cl_long = i64;
pub type cl_ulong = u64;
pub type cl_half = u16;
pub type cl_float = f32;
pub type cl_double = f64;
pub type cl_GLuint = ::libc::c_uint;
pub type cl_GLint = ::libc::c_int;
pub type cl_GLenum = ::libc::c_uint;
pub type __m64 = [::libc::c_longlong; 1usize];
pub type __v1di = [::libc::c_longlong; 1usize];
pub type __v2si = [::libc::c_int; 2usize];
pub type __v4hi = [::libc::c_short; 4usize];
pub type __v8qi = [::libc::c_char; 8usize];
pub type __v4si = [::libc::c_int; 4usize];
pub type __v4sf = [f32; 4usize];
pub type __m128 = [f32; 4usize];
pub type __m128_u = [f32; 4usize];
pub type __v4su = [::libc::c_uint; 4usize];
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::libc::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::libc::c_char) -> ::libc::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::libc::c_char) -> ::libc::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::libc::c_char, __endptr: *mut *mut ::libc::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::libc::c_char, __endptr: *mut *mut ::libc::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::libc::c_char, __endptr: *mut *mut ::libc::c_char) -> u128;
}
extern "C" {
    pub fn strtof32(__nptr: *const ::libc::c_char, __endptr: *mut *mut ::libc::c_char) -> _Float32;
}
extern "C" {
    pub fn strtof64(__nptr: *const ::libc::c_char, __endptr: *mut *mut ::libc::c_char) -> _Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
    ) -> _Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::libc::c_char,
        __size: usize,
        __format: *const ::libc::c_char,
        __f: f64,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::libc::c_char,
        __size: usize,
        __format: *const ::libc::c_char,
        __f: f32,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::libc::c_char,
        __size: usize,
        __format: *const ::libc::c_char,
        __f: u128,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::libc::c_char,
        __size: usize,
        __format: *const ::libc::c_char,
        __f: _Float32,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::libc::c_char,
        __size: usize,
        __format: *const ::libc::c_char,
        __f: _Float64,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::libc::c_char,
        __size: usize,
        __format: *const ::libc::c_char,
        __f: _Float32x,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::libc::c_char,
        __size: usize,
        __format: *const ::libc::c_char,
        __f: _Float64x,
    ) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
        __loc: locale_t,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
        __loc: locale_t,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
        __loc: locale_t,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
        __loc: locale_t,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __loc: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __loc: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::libc::c_char,
        __endptr: *mut *mut ::libc::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
extern "C" {
    pub fn l64a(__n: ::libc::c_long) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::libc::c_char) -> ::libc::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type uint = ::libc::c_uint;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::libc::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::libc::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::libc::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::libc::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::libc::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::libc::c_uint,
    pub __writers: ::libc::c_uint,
    pub __wrphase_futex: ::libc::c_uint,
    pub __writers_futex: ::libc::c_uint,
    pub __pad3: ::libc::c_uint,
    pub __pad4: ::libc::c_uint,
    pub __cur_writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __rwelision: ::libc::c_schar,
    pub __pad1: [::libc::c_uchar; 7usize],
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::libc::c_uint; 2usize],
    pub __g_size: [::libc::c_uint; 2usize],
    pub __g1_orig_size: ::libc::c_uint,
    pub __wrefs: ::libc::c_uint,
    pub __g_signals: [::libc::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::libc::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::libc::c_uint,
    pub __high: ::libc::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::libc::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::libc::c_uint,
    pub __high: ::libc::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::libc::c_char; 4usize],
    pub __align: ::libc::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::libc::c_char; 4usize],
    pub __align: ::libc::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::libc::c_char; 56usize],
    pub __align: ::libc::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::libc::c_char; 40usize],
    pub __align: ::libc::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::libc::c_char; 48usize],
    pub __align: ::libc::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::libc::c_char; 56usize],
    pub __align: ::libc::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::libc::c_char; 8usize],
    pub __align: ::libc::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::libc::c_char; 32usize],
    pub __align: ::libc::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::libc::c_char; 4usize],
    pub __align: ::libc::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::libc::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::libc::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::libc::c_uint,
        __statebuf: *mut ::libc::c_char,
        __statelen: usize,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::libc::c_int,
    pub rand_deg: ::libc::c_int,
    pub rand_sep: ::libc::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::libc::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::libc::c_uint, __buf: *mut random_data) -> ::libc::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::libc::c_uint,
        __statebuf: *mut ::libc::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::libc::c_char, __buf: *mut random_data) -> ::libc::c_int;
}
extern "C" {
    pub fn rand() -> ::libc::c_int;
}
extern "C" {
    pub fn srand(__seed: ::libc::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::libc::c_uint) -> ::libc::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::libc::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::libc::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
}
extern "C" {
    pub fn mrand48() -> ::libc::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::libc::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::libc::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::libc::c_ushort; 3usize],
    pub __old_x: [::libc::c_ushort; 3usize],
    pub __c: ::libc::c_ushort,
    pub __init: ::libc::c_ushort,
    pub __a: ::libc::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::libc::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::libc::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data, __result: *mut ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::libc::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data, __result: *mut ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::libc::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::libc::c_long,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::libc::c_long, __buffer: *mut drand48_data) -> ::libc::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::libc::c_ushort, __buffer: *mut drand48_data)
        -> ::libc::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::libc::c_ushort, __buffer: *mut drand48_data) -> ::libc::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::libc::c_void, __size: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::libc::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::libc::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::libc::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::libc::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::libc::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(__status: ::libc::c_int, __arg: *mut ::libc::c_void),
        >,
        __arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn exit(__status: ::libc::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::libc::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::libc::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::libc::c_char,
        __value: *const ::libc::c_char,
        __replace: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn clearenv() -> ::libc::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::libc::c_char, __suffixlen: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn mkstemps64(__template: *mut ::libc::c_char, __suffixlen: ::libc::c_int)
        -> ::libc::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn mkostemp(__template: *mut ::libc::c_char, __flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn mkostemp64(__template: *mut ::libc::c_char, __flags: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::libc::c_char,
        __suffixlen: ::libc::c_int,
        __flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::libc::c_char,
        __suffixlen: ::libc::c_int,
        __flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn system(__command: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(__name: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::libc::c_char,
        __resolved: *mut ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void) -> ::libc::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::libc::c_void,
        arg2: *const ::libc::c_void,
        arg3: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::libc::c_void,
        __base: *const ::libc::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::libc::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::libc::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_d_fn_t,
        __arg: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn labs(__x: ::libc::c_long) -> ::libc::c_long;
}
extern "C" {
    pub fn llabs(__x: ::libc::c_longlong) -> ::libc::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::libc::c_int, __denom: ::libc::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::libc::c_long, __denom: ::libc::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::libc::c_longlong, __denom: ::libc::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::libc::c_int,
        __decpt: *mut ::libc::c_int,
        __sign: *mut ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::libc::c_int,
        __decpt: *mut ::libc::c_int,
        __sign: *mut ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::libc::c_int,
        __buf: *mut ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::libc::c_int,
        __decpt: *mut ::libc::c_int,
        __sign: *mut ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::libc::c_int,
        __decpt: *mut ::libc::c_int,
        __sign: *mut ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::libc::c_int,
        __buf: *mut ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::libc::c_int,
        __decpt: *mut ::libc::c_int,
        __sign: *mut ::libc::c_int,
        __buf: *mut ::libc::c_char,
        __len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::libc::c_int,
        __decpt: *mut ::libc::c_int,
        __sign: *mut ::libc::c_int,
        __buf: *mut ::libc::c_char,
        __len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::libc::c_int,
        __decpt: *mut ::libc::c_int,
        __sign: *mut ::libc::c_int,
        __buf: *mut ::libc::c_char,
        __len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::libc::c_int,
        __decpt: *mut ::libc::c_int,
        __sign: *mut ::libc::c_int,
        __buf: *mut ::libc::c_char,
        __len: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::libc::c_char, __n: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut u32, __s: *const ::libc::c_char, __n: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::libc::c_char, __wchar: u32) -> ::libc::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::libc::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::libc::c_char, __pwcs: *const u32, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::libc::c_char,
        __tokens: *const *mut ::libc::c_char,
        __valuep: *mut *mut ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn setkey(__key: *const ::libc::c_char);
}
extern "C" {
    pub fn posix_openpt(__oflag: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::libc::c_int,
        __buf: *mut ::libc::c_char,
        __buflen: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn getpt() -> ::libc::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn _mm_sfence();
}
extern "C" {
    pub fn _mm_getcsr() -> ::libc::c_uint;
}
extern "C" {
    pub fn _mm_setcsr(__i: ::libc::c_uint);
}
pub type __m128d = [f64; 2usize];
pub type __m128i = [::libc::c_longlong; 2usize];
pub type __m128d_u = [f64; 2usize];
pub type __m128i_u = [::libc::c_longlong; 2usize];
pub type __v2df = [f64; 2usize];
pub type __v2di = [::libc::c_longlong; 2usize];
pub type __v8hi = [::libc::c_short; 8usize];
pub type __v16qi = [::libc::c_char; 16usize];
pub type __v2du = [::libc::c_ulonglong; 2usize];
pub type __v8hu = [::libc::c_ushort; 8usize];
pub type __v16qu = [::libc::c_uchar; 16usize];
pub type __v16qs = [::libc::c_schar; 16usize];
extern "C" {
    pub fn _mm_clflush(__p: *const ::libc::c_void);
}
extern "C" {
    pub fn _mm_lfence();
}
extern "C" {
    pub fn _mm_mfence();
}
extern "C" {
    pub fn _mm_pause();
}
pub type __cl_float4 = [f32; 4usize];
pub type __cl_uchar16 = [cl_uchar; 16usize];
pub type __cl_char16 = [cl_char; 16usize];
pub type __cl_ushort8 = [cl_ushort; 8usize];
pub type __cl_short8 = [cl_short; 8usize];
pub type __cl_uint4 = [cl_uint; 4usize];
pub type __cl_int4 = [cl_int; 4usize];
pub type __cl_ulong2 = [cl_ulong; 2usize];
pub type __cl_long2 = [cl_long; 2usize];
pub type __cl_double2 = [cl_double; 2usize];
pub type __cl_uchar8 = [cl_uchar; 8usize];
pub type __cl_char8 = [cl_char; 8usize];
pub type __cl_ushort4 = [cl_ushort; 4usize];
pub type __cl_short4 = [cl_short; 4usize];
pub type __cl_uint2 = [cl_uint; 2usize];
pub type __cl_int2 = [cl_int; 2usize];
pub type __cl_ulong1 = [cl_ulong; 1usize];
pub type __cl_long1 = [cl_long; 1usize];
pub type __cl_float2 = [cl_float; 2usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_char2 {
    pub s: [cl_char; 2usize],
    _bindgen_union_align: u16,
}
#[test]
fn bindgen_test_layout_cl_char2() {
    assert_eq!(
        ::std::mem::size_of::<cl_char2>(),
        2usize,
        concat!("Size of: ", stringify!(cl_char2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_char2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_char2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char2),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_char4 {
    pub s: [cl_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_cl_char4() {
    assert_eq!(
        ::std::mem::size_of::<cl_char4>(),
        4usize,
        concat!("Size of: ", stringify!(cl_char4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char4>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_char4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_char4>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4),
            "::",
            stringify!(s)
        )
    );
}
pub type cl_char3 = cl_char4;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_char8 {
    pub s: [cl_char; 8usize],
    pub v8: __cl_char8,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cl_char8() {
    assert_eq!(
        ::std::mem::size_of::<cl_char8>(),
        8usize,
        concat!("Size of: ", stringify!(cl_char8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char8>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_char8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_char8>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_char8>())).v8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_char16 {
    pub s: [cl_char; 16usize],
    pub v8: [__cl_char8; 2usize],
    pub v16: __cl_char16,
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_cl_char16() {
    assert_eq!(
        ::std::mem::size_of::<cl_char16>(),
        16usize,
        concat!("Size of: ", stringify!(cl_char16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_char16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_char16>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_char16>())).v8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16),
            "::",
            stringify!(v8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_char16>())).v16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16),
            "::",
            stringify!(v16)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_uchar2 {
    pub s: [cl_uchar; 2usize],
    _bindgen_union_align: u16,
}
#[test]
fn bindgen_test_layout_cl_uchar2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar2>(),
        2usize,
        concat!("Size of: ", stringify!(cl_uchar2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_uchar2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uchar2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar2),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_uchar4 {
    pub s: [cl_uchar; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_cl_uchar4() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar4>(),
        4usize,
        concat!("Size of: ", stringify!(cl_uchar4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar4>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uchar4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uchar4>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4),
            "::",
            stringify!(s)
        )
    );
}
pub type cl_uchar3 = cl_uchar4;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_uchar8 {
    pub s: [cl_uchar; 8usize],
    pub v8: __cl_uchar8,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cl_uchar8() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar8>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uchar8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar8>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_uchar8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uchar8>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uchar8>())).v8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_uchar16 {
    pub s: [cl_uchar; 16usize],
    pub v8: [__cl_uchar8; 2usize],
    pub v16: __cl_uchar16,
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_cl_uchar16() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar16>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uchar16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_uchar16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uchar16>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uchar16>())).v8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16),
            "::",
            stringify!(v8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uchar16>())).v16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16),
            "::",
            stringify!(v16)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_short2 {
    pub s: [cl_short; 2usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_cl_short2() {
    assert_eq!(
        ::std::mem::size_of::<cl_short2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_short2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_short2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_short2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short2),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_short4 {
    pub s: [cl_short; 4usize],
    pub v4: __cl_short4,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cl_short4() {
    assert_eq!(
        ::std::mem::size_of::<cl_short4>(),
        8usize,
        concat!("Size of: ", stringify!(cl_short4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short4>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_short4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_short4>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_short4>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4),
            "::",
            stringify!(v4)
        )
    );
}
pub type cl_short3 = cl_short4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_short8 {
    pub s: [cl_short; 8usize],
    pub v4: [__cl_short4; 2usize],
    pub v8: __cl_short8,
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_cl_short8() {
    assert_eq!(
        ::std::mem::size_of::<cl_short8>(),
        16usize,
        concat!("Size of: ", stringify!(cl_short8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_short8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_short8>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_short8>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_short8>())).v8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_short16 {
    pub s: [cl_short; 16usize],
    pub v4: [__cl_short4; 4usize],
    pub v8: [__cl_short8; 2usize],
    _bindgen_union_align: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_cl_short16() {
    assert_eq!(
        ::std::mem::size_of::<cl_short16>(),
        32usize,
        concat!("Size of: ", stringify!(cl_short16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short16>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_short16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_short16>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_short16>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_short16>())).v8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_ushort2 {
    pub s: [cl_ushort; 2usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_cl_ushort2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_ushort2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_ushort2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ushort2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort2),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_ushort4 {
    pub s: [cl_ushort; 4usize],
    pub v4: __cl_ushort4,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cl_ushort4() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort4>(),
        8usize,
        concat!("Size of: ", stringify!(cl_ushort4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort4>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ushort4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ushort4>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ushort4>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4),
            "::",
            stringify!(v4)
        )
    );
}
pub type cl_ushort3 = cl_ushort4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_ushort8 {
    pub s: [cl_ushort; 8usize],
    pub v4: [__cl_ushort4; 2usize],
    pub v8: __cl_ushort8,
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_cl_ushort8() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort8>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ushort8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ushort8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ushort8>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ushort8>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ushort8>())).v8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_ushort16 {
    pub s: [cl_ushort; 16usize],
    pub v4: [__cl_ushort4; 4usize],
    pub v8: [__cl_ushort8; 2usize],
    _bindgen_union_align: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_cl_ushort16() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort16>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ushort16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort16>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_ushort16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ushort16>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ushort16>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ushort16>())).v8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_half2 {
    pub s: [cl_half; 2usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_cl_half2() {
    assert_eq!(
        ::std::mem::size_of::<cl_half2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_half2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_half2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_half2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half2),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_half4 {
    pub s: [cl_half; 4usize],
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cl_half4() {
    assert_eq!(
        ::std::mem::size_of::<cl_half4>(),
        8usize,
        concat!("Size of: ", stringify!(cl_half4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half4>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_half4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_half4>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4),
            "::",
            stringify!(s)
        )
    );
}
pub type cl_half3 = cl_half4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_half8 {
    pub s: [cl_half; 8usize],
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_cl_half8() {
    assert_eq!(
        ::std::mem::size_of::<cl_half8>(),
        16usize,
        concat!("Size of: ", stringify!(cl_half8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_half8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_half8>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_half16 {
    pub s: [cl_half; 16usize],
    _bindgen_union_align: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_cl_half16() {
    assert_eq!(
        ::std::mem::size_of::<cl_half16>(),
        32usize,
        concat!("Size of: ", stringify!(cl_half16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half16>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_half16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_half16>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_int2 {
    pub s: [cl_int; 2usize],
    pub v2: __cl_int2,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cl_int2() {
    assert_eq!(
        ::std::mem::size_of::<cl_int2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_int2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_int2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_int2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_int2>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_int4 {
    pub s: [cl_int; 4usize],
    pub v2: [__cl_int2; 2usize],
    pub v4: __cl_int4,
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_cl_int4() {
    assert_eq!(
        ::std::mem::size_of::<cl_int4>(),
        16usize,
        concat!("Size of: ", stringify!(cl_int4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_int4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_int4>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_int4>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_int4>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4),
            "::",
            stringify!(v4)
        )
    );
}
pub type cl_int3 = cl_int4;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_int8 {
    pub s: [cl_int; 8usize],
    pub v2: [__cl_int2; 4usize],
    pub v4: [__cl_int4; 2usize],
    _bindgen_union_align: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_cl_int8() {
    assert_eq!(
        ::std::mem::size_of::<cl_int8>(),
        32usize,
        concat!("Size of: ", stringify!(cl_int8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int8>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_int8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_int8>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_int8>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_int8>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_int16 {
    pub s: [cl_int; 16usize],
    pub v2: [__cl_int2; 8usize],
    pub v4: [__cl_int4; 4usize],
    _bindgen_union_align: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_cl_int16() {
    assert_eq!(
        ::std::mem::size_of::<cl_int16>(),
        64usize,
        concat!("Size of: ", stringify!(cl_int16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int16>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_int16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_int16>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_int16>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_int16>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_uint2 {
    pub s: [cl_uint; 2usize],
    pub v2: __cl_uint2,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cl_uint2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uint2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_uint2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uint2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uint2>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_uint4 {
    pub s: [cl_uint; 4usize],
    pub v2: [__cl_uint2; 2usize],
    pub v4: __cl_uint4,
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_cl_uint4() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint4>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uint4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_uint4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uint4>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uint4>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uint4>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4),
            "::",
            stringify!(v4)
        )
    );
}
pub type cl_uint3 = cl_uint4;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_uint8 {
    pub s: [cl_uint; 8usize],
    pub v2: [__cl_uint2; 4usize],
    pub v4: [__cl_uint4; 2usize],
    _bindgen_union_align: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_cl_uint8() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint8>(),
        32usize,
        concat!("Size of: ", stringify!(cl_uint8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint8>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_uint8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uint8>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uint8>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uint8>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_uint16 {
    pub s: [cl_uint; 16usize],
    pub v2: [__cl_uint2; 8usize],
    pub v4: [__cl_uint4; 4usize],
    _bindgen_union_align: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_cl_uint16() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint16>(),
        64usize,
        concat!("Size of: ", stringify!(cl_uint16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint16>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_uint16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uint16>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uint16>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_uint16>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_long2 {
    pub s: [cl_long; 2usize],
    pub v2: __cl_long2,
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_cl_long2() {
    assert_eq!(
        ::std::mem::size_of::<cl_long2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_long2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long2>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_long2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_long2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_long2>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_long4 {
    pub s: [cl_long; 4usize],
    pub v2: [__cl_long2; 2usize],
    _bindgen_union_align: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_cl_long4() {
    assert_eq!(
        ::std::mem::size_of::<cl_long4>(),
        32usize,
        concat!("Size of: ", stringify!(cl_long4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long4>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_long4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_long4>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_long4>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4),
            "::",
            stringify!(v2)
        )
    );
}
pub type cl_long3 = cl_long4;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_long8 {
    pub s: [cl_long; 8usize],
    pub v2: [__cl_long2; 4usize],
    _bindgen_union_align: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_cl_long8() {
    assert_eq!(
        ::std::mem::size_of::<cl_long8>(),
        64usize,
        concat!("Size of: ", stringify!(cl_long8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long8>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_long8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_long8>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_long8>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(128))]
#[derive(Copy, Clone)]
pub union cl_long16 {
    pub s: [cl_long; 16usize],
    pub v2: [__cl_long2; 8usize],
    _bindgen_union_align: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_cl_long16() {
    assert_eq!(
        ::std::mem::size_of::<cl_long16>(),
        128usize,
        concat!("Size of: ", stringify!(cl_long16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long16>(),
        128usize,
        concat!("Alignment of ", stringify!(cl_long16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_long16>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_long16>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_ulong2 {
    pub s: [cl_ulong; 2usize],
    pub v2: __cl_ulong2,
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_cl_ulong2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ulong2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong2>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ulong2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ulong2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ulong2>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_ulong4 {
    pub s: [cl_ulong; 4usize],
    pub v2: [__cl_ulong2; 2usize],
    _bindgen_union_align: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_cl_ulong4() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong4>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ulong4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong4>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_ulong4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ulong4>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ulong4>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4),
            "::",
            stringify!(v2)
        )
    );
}
pub type cl_ulong3 = cl_ulong4;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_ulong8 {
    pub s: [cl_ulong; 8usize],
    pub v2: [__cl_ulong2; 4usize],
    _bindgen_union_align: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_cl_ulong8() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong8>(),
        64usize,
        concat!("Size of: ", stringify!(cl_ulong8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong8>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_ulong8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ulong8>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ulong8>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(128))]
#[derive(Copy, Clone)]
pub union cl_ulong16 {
    pub s: [cl_ulong; 16usize],
    pub v2: [__cl_ulong2; 8usize],
    _bindgen_union_align: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_cl_ulong16() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong16>(),
        128usize,
        concat!("Size of: ", stringify!(cl_ulong16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong16>(),
        128usize,
        concat!("Alignment of ", stringify!(cl_ulong16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ulong16>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_ulong16>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_float2 {
    pub s: [cl_float; 2usize],
    pub v2: __cl_float2,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cl_float2() {
    assert_eq!(
        ::std::mem::size_of::<cl_float2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_float2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_float2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_float2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_float2>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_float4 {
    pub s: [cl_float; 4usize],
    pub v2: [__cl_float2; 2usize],
    pub v4: __cl_float4,
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_cl_float4() {
    assert_eq!(
        ::std::mem::size_of::<cl_float4>(),
        16usize,
        concat!("Size of: ", stringify!(cl_float4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_float4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_float4>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_float4>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_float4>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4),
            "::",
            stringify!(v4)
        )
    );
}
pub type cl_float3 = cl_float4;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_float8 {
    pub s: [cl_float; 8usize],
    pub v2: [__cl_float2; 4usize],
    pub v4: [__cl_float4; 2usize],
    _bindgen_union_align: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_cl_float8() {
    assert_eq!(
        ::std::mem::size_of::<cl_float8>(),
        32usize,
        concat!("Size of: ", stringify!(cl_float8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float8>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_float8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_float8>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_float8>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_float8>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_float16 {
    pub s: [cl_float; 16usize],
    pub v2: [__cl_float2; 8usize],
    pub v4: [__cl_float4; 4usize],
    _bindgen_union_align: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_cl_float16() {
    assert_eq!(
        ::std::mem::size_of::<cl_float16>(),
        64usize,
        concat!("Size of: ", stringify!(cl_float16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float16>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_float16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_float16>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_float16>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_float16>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_double2 {
    pub s: [cl_double; 2usize],
    pub v2: __cl_double2,
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_cl_double2() {
    assert_eq!(
        ::std::mem::size_of::<cl_double2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_double2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double2>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_double2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_double2>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_double2>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_double4 {
    pub s: [cl_double; 4usize],
    pub v2: [__cl_double2; 2usize],
    _bindgen_union_align: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_cl_double4() {
    assert_eq!(
        ::std::mem::size_of::<cl_double4>(),
        32usize,
        concat!("Size of: ", stringify!(cl_double4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double4>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_double4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_double4>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_double4>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4),
            "::",
            stringify!(v2)
        )
    );
}
pub type cl_double3 = cl_double4;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_double8 {
    pub s: [cl_double; 8usize],
    pub v2: [__cl_double2; 4usize],
    _bindgen_union_align: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_cl_double8() {
    assert_eq!(
        ::std::mem::size_of::<cl_double8>(),
        64usize,
        concat!("Size of: ", stringify!(cl_double8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double8>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_double8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_double8>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_double8>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(128))]
#[derive(Copy, Clone)]
pub union cl_double16 {
    pub s: [cl_double; 16usize],
    pub v2: [__cl_double2; 8usize],
    _bindgen_union_align: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_cl_double16() {
    assert_eq!(
        ::std::mem::size_of::<cl_double16>(),
        128usize,
        concat!("Size of: ", stringify!(cl_double16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double16>(),
        128usize,
        concat!("Alignment of ", stringify!(cl_double16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_double16>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_double16>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_platform_id {
    _unused: [u8; 0],
}
pub type cl_platform_id = *mut _cl_platform_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_device_id {
    _unused: [u8; 0],
}
pub type cl_device_id = *mut _cl_device_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_context {
    _unused: [u8; 0],
}
pub type cl_context = *mut _cl_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_command_queue {
    _unused: [u8; 0],
}
pub type cl_command_queue = *mut _cl_command_queue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_mem {
    _unused: [u8; 0],
}
pub type cl_mem = *mut _cl_mem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_program {
    _unused: [u8; 0],
}
pub type cl_program = *mut _cl_program;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_kernel {
    _unused: [u8; 0],
}
pub type cl_kernel = *mut _cl_kernel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_event {
    _unused: [u8; 0],
}
pub type cl_event = *mut _cl_event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_sampler {
    _unused: [u8; 0],
}
pub type cl_sampler = *mut _cl_sampler;
pub type cl_bool = cl_uint;
pub type cl_bitfield = cl_ulong;
pub type cl_device_type = cl_bitfield;
pub type cl_platform_info = cl_uint;
pub type cl_device_info = cl_uint;
pub type cl_device_fp_config = cl_bitfield;
pub type cl_device_mem_cache_type = cl_uint;
pub type cl_device_local_mem_type = cl_uint;
pub type cl_device_exec_capabilities = cl_bitfield;
pub type cl_device_svm_capabilities = cl_bitfield;
pub type cl_command_queue_properties = cl_bitfield;
pub type cl_device_partition_property = isize;
pub type cl_device_affinity_domain = cl_bitfield;
pub type cl_context_properties = isize;
pub type cl_context_info = cl_uint;
pub type cl_queue_properties = cl_bitfield;
pub type cl_command_queue_info = cl_uint;
pub type cl_channel_order = cl_uint;
pub type cl_channel_type = cl_uint;
pub type cl_mem_flags = cl_bitfield;
pub type cl_svm_mem_flags = cl_bitfield;
pub type cl_mem_object_type = cl_uint;
pub type cl_mem_info = cl_uint;
pub type cl_mem_migration_flags = cl_bitfield;
pub type cl_image_info = cl_uint;
pub type cl_buffer_create_type = cl_uint;
pub type cl_addressing_mode = cl_uint;
pub type cl_filter_mode = cl_uint;
pub type cl_sampler_info = cl_uint;
pub type cl_map_flags = cl_bitfield;
pub type cl_pipe_properties = isize;
pub type cl_pipe_info = cl_uint;
pub type cl_program_info = cl_uint;
pub type cl_program_build_info = cl_uint;
pub type cl_program_binary_type = cl_uint;
pub type cl_build_status = cl_int;
pub type cl_kernel_info = cl_uint;
pub type cl_kernel_arg_info = cl_uint;
pub type cl_kernel_arg_address_qualifier = cl_uint;
pub type cl_kernel_arg_access_qualifier = cl_uint;
pub type cl_kernel_arg_type_qualifier = cl_bitfield;
pub type cl_kernel_work_group_info = cl_uint;
pub type cl_kernel_sub_group_info = cl_uint;
pub type cl_event_info = cl_uint;
pub type cl_command_type = cl_uint;
pub type cl_profiling_info = cl_uint;
pub type cl_sampler_properties = cl_bitfield;
pub type cl_kernel_exec_info = cl_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_image_format {
    pub image_channel_order: cl_channel_order,
    pub image_channel_data_type: cl_channel_type,
}
#[test]
fn bindgen_test_layout__cl_image_format() {
    assert_eq!(
        ::std::mem::size_of::<_cl_image_format>(),
        8usize,
        concat!("Size of: ", stringify!(_cl_image_format))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_image_format>(),
        4usize,
        concat!("Alignment of ", stringify!(_cl_image_format))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cl_image_format>())).image_channel_order as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_format),
            "::",
            stringify!(image_channel_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cl_image_format>())).image_channel_data_type as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_format),
            "::",
            stringify!(image_channel_data_type)
        )
    );
}
pub type cl_image_format = _cl_image_format;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cl_image_desc {
    pub image_type: cl_mem_object_type,
    pub image_width: usize,
    pub image_height: usize,
    pub image_depth: usize,
    pub image_array_size: usize,
    pub image_row_pitch: usize,
    pub image_slice_pitch: usize,
    pub num_mip_levels: cl_uint,
    pub num_samples: cl_uint,
    pub __bindgen_anon_1: _cl_image_desc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _cl_image_desc__bindgen_ty_1 {
    pub buffer: cl_mem,
    pub mem_object: cl_mem,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__cl_image_desc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_cl_image_desc__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_cl_image_desc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_image_desc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_cl_image_desc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cl_image_desc__bindgen_ty_1>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc__bindgen_ty_1),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cl_image_desc__bindgen_ty_1>())).mem_object as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc__bindgen_ty_1),
            "::",
            stringify!(mem_object)
        )
    );
}
#[test]
fn bindgen_test_layout__cl_image_desc() {
    assert_eq!(
        ::std::mem::size_of::<_cl_image_desc>(),
        72usize,
        concat!("Size of: ", stringify!(_cl_image_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_image_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(_cl_image_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cl_image_desc>())).image_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cl_image_desc>())).image_width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cl_image_desc>())).image_height as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cl_image_desc>())).image_depth as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cl_image_desc>())).image_array_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_array_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cl_image_desc>())).image_row_pitch as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_row_pitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cl_image_desc>())).image_slice_pitch as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_slice_pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cl_image_desc>())).num_mip_levels as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(num_mip_levels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cl_image_desc>())).num_samples as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(num_samples)
        )
    );
}
pub type cl_image_desc = _cl_image_desc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_buffer_region {
    pub origin: usize,
    pub size: usize,
}
#[test]
fn bindgen_test_layout__cl_buffer_region() {
    assert_eq!(
        ::std::mem::size_of::<_cl_buffer_region>(),
        16usize,
        concat!("Size of: ", stringify!(_cl_buffer_region))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_buffer_region>(),
        8usize,
        concat!("Alignment of ", stringify!(_cl_buffer_region))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cl_buffer_region>())).origin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_buffer_region),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cl_buffer_region>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_buffer_region),
            "::",
            stringify!(size)
        )
    );
}
pub type cl_buffer_region = _cl_buffer_region;
extern "C" {
    pub fn clGetPlatformIDs(arg1: cl_uint, arg2: *mut cl_platform_id, arg3: *mut cl_uint)
        -> cl_int;
}
extern "C" {
    pub fn clGetPlatformInfo(
        arg1: cl_platform_id,
        arg2: cl_platform_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetDeviceIDs(
        arg1: cl_platform_id,
        arg2: cl_device_type,
        arg3: cl_uint,
        arg4: *mut cl_device_id,
        arg5: *mut cl_uint,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetDeviceInfo(
        arg1: cl_device_id,
        arg2: cl_device_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateSubDevices(
        arg1: cl_device_id,
        arg2: *const cl_device_partition_property,
        arg3: cl_uint,
        arg4: *mut cl_device_id,
        arg5: *mut cl_uint,
    ) -> cl_int;
}
extern "C" {
    pub fn clRetainDevice(arg1: cl_device_id) -> cl_int;
}
extern "C" {
    pub fn clReleaseDevice(arg1: cl_device_id) -> cl_int;
}
extern "C" {
    pub fn clSetDefaultDeviceCommandQueue(
        arg1: cl_context,
        arg2: cl_device_id,
        arg3: cl_command_queue,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetDeviceAndHostTimer(
        arg1: cl_device_id,
        arg2: *mut cl_ulong,
        arg3: *mut cl_ulong,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetHostTimer(arg1: cl_device_id, arg2: *mut cl_ulong) -> cl_int;
}
extern "C" {
    pub fn clCreateContext(
        arg1: *const cl_context_properties,
        arg2: cl_uint,
        arg3: *const cl_device_id,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::libc::c_char,
                arg2: *const ::libc::c_void,
                arg3: usize,
                arg4: *mut ::libc::c_void,
            ),
        >,
        arg5: *mut ::libc::c_void,
        arg6: *mut cl_int,
    ) -> cl_context;
}
extern "C" {
    pub fn clCreateContextFromType(
        arg1: *const cl_context_properties,
        arg2: cl_device_type,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::libc::c_char,
                arg2: *const ::libc::c_void,
                arg3: usize,
                arg4: *mut ::libc::c_void,
            ),
        >,
        arg4: *mut ::libc::c_void,
        arg5: *mut cl_int,
    ) -> cl_context;
}
extern "C" {
    pub fn clRetainContext(arg1: cl_context) -> cl_int;
}
extern "C" {
    pub fn clReleaseContext(arg1: cl_context) -> cl_int;
}
extern "C" {
    pub fn clGetContextInfo(
        arg1: cl_context,
        arg2: cl_context_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateCommandQueueWithProperties(
        arg1: cl_context,
        arg2: cl_device_id,
        arg3: *const cl_queue_properties,
        arg4: *mut cl_int,
    ) -> cl_command_queue;
}
extern "C" {
    pub fn clRetainCommandQueue(arg1: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clReleaseCommandQueue(arg1: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clGetCommandQueueInfo(
        arg1: cl_command_queue,
        arg2: cl_command_queue_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateBuffer(
        arg1: cl_context,
        arg2: cl_mem_flags,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreateSubBuffer(
        arg1: cl_mem,
        arg2: cl_mem_flags,
        arg3: cl_buffer_create_type,
        arg4: *const ::libc::c_void,
        arg5: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreateImage(
        arg1: cl_context,
        arg2: cl_mem_flags,
        arg3: *const cl_image_format,
        arg4: *const cl_image_desc,
        arg5: *mut ::libc::c_void,
        arg6: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreatePipe(
        arg1: cl_context,
        arg2: cl_mem_flags,
        arg3: cl_uint,
        arg4: cl_uint,
        arg5: *const cl_pipe_properties,
        arg6: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clRetainMemObject(arg1: cl_mem) -> cl_int;
}
extern "C" {
    pub fn clReleaseMemObject(arg1: cl_mem) -> cl_int;
}
extern "C" {
    pub fn clGetSupportedImageFormats(
        arg1: cl_context,
        arg2: cl_mem_flags,
        arg3: cl_mem_object_type,
        arg4: cl_uint,
        arg5: *mut cl_image_format,
        arg6: *mut cl_uint,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetMemObjectInfo(
        arg1: cl_mem,
        arg2: cl_mem_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetImageInfo(
        arg1: cl_mem,
        arg2: cl_image_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetPipeInfo(
        arg1: cl_mem,
        arg2: cl_pipe_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clSetMemObjectDestructorCallback(
        arg1: cl_mem,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: cl_mem, arg2: *mut ::libc::c_void)>,
        arg3: *mut ::libc::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clSVMAlloc(
        arg1: cl_context,
        arg2: cl_svm_mem_flags,
        arg3: usize,
        arg4: cl_uint,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn clSVMFree(arg1: cl_context, arg2: *mut ::libc::c_void);
}
extern "C" {
    pub fn clCreateSamplerWithProperties(
        arg1: cl_context,
        arg2: *const cl_sampler_properties,
        arg3: *mut cl_int,
    ) -> cl_sampler;
}
extern "C" {
    pub fn clRetainSampler(arg1: cl_sampler) -> cl_int;
}
extern "C" {
    pub fn clReleaseSampler(arg1: cl_sampler) -> cl_int;
}
extern "C" {
    pub fn clGetSamplerInfo(
        arg1: cl_sampler,
        arg2: cl_sampler_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateProgramWithSource(
        arg1: cl_context,
        arg2: cl_uint,
        arg3: *mut *const ::libc::c_char,
        arg4: *const usize,
        arg5: *mut cl_int,
    ) -> cl_program;
}
extern "C" {
    pub fn clCreateProgramWithBinary(
        arg1: cl_context,
        arg2: cl_uint,
        arg3: *const cl_device_id,
        arg4: *const usize,
        arg5: *mut *const ::libc::c_uchar,
        arg6: *mut cl_int,
        arg7: *mut cl_int,
    ) -> cl_program;
}
extern "C" {
    pub fn clCreateProgramWithBuiltInKernels(
        arg1: cl_context,
        arg2: cl_uint,
        arg3: *const cl_device_id,
        arg4: *const ::libc::c_char,
        arg5: *mut cl_int,
    ) -> cl_program;
}
extern "C" {
    pub fn clCreateProgramWithIL(
        arg1: cl_context,
        arg2: *const ::libc::c_void,
        arg3: usize,
        arg4: *mut cl_int,
    ) -> cl_program;
}
extern "C" {
    pub fn clRetainProgram(arg1: cl_program) -> cl_int;
}
extern "C" {
    pub fn clReleaseProgram(arg1: cl_program) -> cl_int;
}
extern "C" {
    pub fn clBuildProgram(
        arg1: cl_program,
        arg2: cl_uint,
        arg3: *const cl_device_id,
        arg4: *const ::libc::c_char,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: cl_program, arg2: *mut ::libc::c_void),
        >,
        arg6: *mut ::libc::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clCompileProgram(
        arg1: cl_program,
        arg2: cl_uint,
        arg3: *const cl_device_id,
        arg4: *const ::libc::c_char,
        arg5: cl_uint,
        arg6: *const cl_program,
        arg7: *mut *const ::libc::c_char,
        arg8: ::std::option::Option<
            unsafe extern "C" fn(arg1: cl_program, arg2: *mut ::libc::c_void),
        >,
        arg9: *mut ::libc::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clLinkProgram(
        arg1: cl_context,
        arg2: cl_uint,
        arg3: *const cl_device_id,
        arg4: *const ::libc::c_char,
        arg5: cl_uint,
        arg6: *const cl_program,
        arg7: ::std::option::Option<
            unsafe extern "C" fn(arg1: cl_program, arg2: *mut ::libc::c_void),
        >,
        arg8: *mut ::libc::c_void,
        arg9: *mut cl_int,
    ) -> cl_program;
}
extern "C" {
    pub fn clSetProgramReleaseCallback(
        arg1: cl_program,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: cl_program, arg2: *mut ::libc::c_void),
        >,
        arg3: *mut ::libc::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clSetProgramSpecializationConstant(
        arg1: cl_program,
        arg2: cl_uint,
        arg3: usize,
        arg4: *const ::libc::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clUnloadPlatformCompiler(arg1: cl_platform_id) -> cl_int;
}
extern "C" {
    pub fn clGetProgramInfo(
        arg1: cl_program,
        arg2: cl_program_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetProgramBuildInfo(
        arg1: cl_program,
        arg2: cl_device_id,
        arg3: cl_program_build_info,
        arg4: usize,
        arg5: *mut ::libc::c_void,
        arg6: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateKernel(
        arg1: cl_program,
        arg2: *const ::libc::c_char,
        arg3: *mut cl_int,
    ) -> cl_kernel;
}
extern "C" {
    pub fn clCreateKernelsInProgram(
        arg1: cl_program,
        arg2: cl_uint,
        arg3: *mut cl_kernel,
        arg4: *mut cl_uint,
    ) -> cl_int;
}
extern "C" {
    pub fn clCloneKernel(arg1: cl_kernel, arg2: *mut cl_int) -> cl_kernel;
}
extern "C" {
    pub fn clRetainKernel(arg1: cl_kernel) -> cl_int;
}
extern "C" {
    pub fn clReleaseKernel(arg1: cl_kernel) -> cl_int;
}
extern "C" {
    pub fn clSetKernelArg(
        arg1: cl_kernel,
        arg2: cl_uint,
        arg3: usize,
        arg4: *const ::libc::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clSetKernelArgSVMPointer(
        arg1: cl_kernel,
        arg2: cl_uint,
        arg3: *const ::libc::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clSetKernelExecInfo(
        arg1: cl_kernel,
        arg2: cl_kernel_exec_info,
        arg3: usize,
        arg4: *const ::libc::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetKernelInfo(
        arg1: cl_kernel,
        arg2: cl_kernel_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetKernelArgInfo(
        arg1: cl_kernel,
        arg2: cl_uint,
        arg3: cl_kernel_arg_info,
        arg4: usize,
        arg5: *mut ::libc::c_void,
        arg6: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetKernelWorkGroupInfo(
        arg1: cl_kernel,
        arg2: cl_device_id,
        arg3: cl_kernel_work_group_info,
        arg4: usize,
        arg5: *mut ::libc::c_void,
        arg6: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetKernelSubGroupInfo(
        arg1: cl_kernel,
        arg2: cl_device_id,
        arg3: cl_kernel_sub_group_info,
        arg4: usize,
        arg5: *const ::libc::c_void,
        arg6: usize,
        arg7: *mut ::libc::c_void,
        arg8: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clWaitForEvents(arg1: cl_uint, arg2: *const cl_event) -> cl_int;
}
extern "C" {
    pub fn clGetEventInfo(
        arg1: cl_event,
        arg2: cl_event_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateUserEvent(arg1: cl_context, arg2: *mut cl_int) -> cl_event;
}
extern "C" {
    pub fn clRetainEvent(arg1: cl_event) -> cl_int;
}
extern "C" {
    pub fn clReleaseEvent(arg1: cl_event) -> cl_int;
}
extern "C" {
    pub fn clSetUserEventStatus(arg1: cl_event, arg2: cl_int) -> cl_int;
}
extern "C" {
    pub fn clSetEventCallback(
        arg1: cl_event,
        arg2: cl_int,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: cl_event, arg2: cl_int, arg3: *mut ::libc::c_void),
        >,
        arg4: *mut ::libc::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetEventProfilingInfo(
        arg1: cl_event,
        arg2: cl_profiling_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clFlush(arg1: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clFinish(arg1: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReadBuffer(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_bool,
        arg4: usize,
        arg5: usize,
        arg6: *mut ::libc::c_void,
        arg7: cl_uint,
        arg8: *const cl_event,
        arg9: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReadBufferRect(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_bool,
        arg4: *const usize,
        arg5: *const usize,
        arg6: *const usize,
        arg7: usize,
        arg8: usize,
        arg9: usize,
        arg10: usize,
        arg11: *mut ::libc::c_void,
        arg12: cl_uint,
        arg13: *const cl_event,
        arg14: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueWriteBuffer(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_bool,
        arg4: usize,
        arg5: usize,
        arg6: *const ::libc::c_void,
        arg7: cl_uint,
        arg8: *const cl_event,
        arg9: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueWriteBufferRect(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_bool,
        arg4: *const usize,
        arg5: *const usize,
        arg6: *const usize,
        arg7: usize,
        arg8: usize,
        arg9: usize,
        arg10: usize,
        arg11: *const ::libc::c_void,
        arg12: cl_uint,
        arg13: *const cl_event,
        arg14: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueFillBuffer(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: *const ::libc::c_void,
        arg4: usize,
        arg5: usize,
        arg6: usize,
        arg7: cl_uint,
        arg8: *const cl_event,
        arg9: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyBuffer(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_mem,
        arg4: usize,
        arg5: usize,
        arg6: usize,
        arg7: cl_uint,
        arg8: *const cl_event,
        arg9: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyBufferRect(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_mem,
        arg4: *const usize,
        arg5: *const usize,
        arg6: *const usize,
        arg7: usize,
        arg8: usize,
        arg9: usize,
        arg10: usize,
        arg11: cl_uint,
        arg12: *const cl_event,
        arg13: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReadImage(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_bool,
        arg4: *const usize,
        arg5: *const usize,
        arg6: usize,
        arg7: usize,
        arg8: *mut ::libc::c_void,
        arg9: cl_uint,
        arg10: *const cl_event,
        arg11: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueWriteImage(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_bool,
        arg4: *const usize,
        arg5: *const usize,
        arg6: usize,
        arg7: usize,
        arg8: *const ::libc::c_void,
        arg9: cl_uint,
        arg10: *const cl_event,
        arg11: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueFillImage(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: *const ::libc::c_void,
        arg4: *const usize,
        arg5: *const usize,
        arg6: cl_uint,
        arg7: *const cl_event,
        arg8: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyImage(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_mem,
        arg4: *const usize,
        arg5: *const usize,
        arg6: *const usize,
        arg7: cl_uint,
        arg8: *const cl_event,
        arg9: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyImageToBuffer(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_mem,
        arg4: *const usize,
        arg5: *const usize,
        arg6: usize,
        arg7: cl_uint,
        arg8: *const cl_event,
        arg9: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyBufferToImage(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_mem,
        arg4: usize,
        arg5: *const usize,
        arg6: *const usize,
        arg7: cl_uint,
        arg8: *const cl_event,
        arg9: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueMapBuffer(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_bool,
        arg4: cl_map_flags,
        arg5: usize,
        arg6: usize,
        arg7: cl_uint,
        arg8: *const cl_event,
        arg9: *mut cl_event,
        arg10: *mut cl_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn clEnqueueMapImage(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: cl_bool,
        arg4: cl_map_flags,
        arg5: *const usize,
        arg6: *const usize,
        arg7: *mut usize,
        arg8: *mut usize,
        arg9: cl_uint,
        arg10: *const cl_event,
        arg11: *mut cl_event,
        arg12: *mut cl_int,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn clEnqueueUnmapMemObject(
        arg1: cl_command_queue,
        arg2: cl_mem,
        arg3: *mut ::libc::c_void,
        arg4: cl_uint,
        arg5: *const cl_event,
        arg6: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueMigrateMemObjects(
        arg1: cl_command_queue,
        arg2: cl_uint,
        arg3: *const cl_mem,
        arg4: cl_mem_migration_flags,
        arg5: cl_uint,
        arg6: *const cl_event,
        arg7: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueNDRangeKernel(
        arg1: cl_command_queue,
        arg2: cl_kernel,
        arg3: cl_uint,
        arg4: *const usize,
        arg5: *const usize,
        arg6: *const usize,
        arg7: cl_uint,
        arg8: *const cl_event,
        arg9: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueNativeKernel(
        arg1: cl_command_queue,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void)>,
        arg3: *mut ::libc::c_void,
        arg4: usize,
        arg5: cl_uint,
        arg6: *const cl_mem,
        arg7: *mut *const ::libc::c_void,
        arg8: cl_uint,
        arg9: *const cl_event,
        arg10: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueMarkerWithWaitList(
        arg1: cl_command_queue,
        arg2: cl_uint,
        arg3: *const cl_event,
        arg4: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueBarrierWithWaitList(
        arg1: cl_command_queue,
        arg2: cl_uint,
        arg3: *const cl_event,
        arg4: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMFree(
        arg1: cl_command_queue,
        arg2: cl_uint,
        arg3: *mut *mut ::libc::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: cl_command_queue,
                arg2: cl_uint,
                arg3: *mut *mut ::libc::c_void,
                arg4: *mut ::libc::c_void,
            ),
        >,
        arg5: *mut ::libc::c_void,
        arg6: cl_uint,
        arg7: *const cl_event,
        arg8: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMMemcpy(
        arg1: cl_command_queue,
        arg2: cl_bool,
        arg3: *mut ::libc::c_void,
        arg4: *const ::libc::c_void,
        arg5: usize,
        arg6: cl_uint,
        arg7: *const cl_event,
        arg8: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMMemFill(
        arg1: cl_command_queue,
        arg2: *mut ::libc::c_void,
        arg3: *const ::libc::c_void,
        arg4: usize,
        arg5: usize,
        arg6: cl_uint,
        arg7: *const cl_event,
        arg8: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMMap(
        arg1: cl_command_queue,
        arg2: cl_bool,
        arg3: cl_map_flags,
        arg4: *mut ::libc::c_void,
        arg5: usize,
        arg6: cl_uint,
        arg7: *const cl_event,
        arg8: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMUnmap(
        arg1: cl_command_queue,
        arg2: *mut ::libc::c_void,
        arg3: cl_uint,
        arg4: *const cl_event,
        arg5: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMMigrateMem(
        arg1: cl_command_queue,
        arg2: cl_uint,
        arg3: *mut *const ::libc::c_void,
        arg4: *const usize,
        arg5: cl_mem_migration_flags,
        arg6: cl_uint,
        arg7: *const cl_event,
        arg8: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetExtensionFunctionAddressForPlatform(
        arg1: cl_platform_id,
        arg2: *const ::libc::c_char,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn clCreateImage2D(
        arg1: cl_context,
        arg2: cl_mem_flags,
        arg3: *const cl_image_format,
        arg4: usize,
        arg5: usize,
        arg6: usize,
        arg7: *mut ::libc::c_void,
        arg8: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreateImage3D(
        arg1: cl_context,
        arg2: cl_mem_flags,
        arg3: *const cl_image_format,
        arg4: usize,
        arg5: usize,
        arg6: usize,
        arg7: usize,
        arg8: usize,
        arg9: *mut ::libc::c_void,
        arg10: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clEnqueueMarker(arg1: cl_command_queue, arg2: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueWaitForEvents(
        arg1: cl_command_queue,
        arg2: cl_uint,
        arg3: *const cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueBarrier(arg1: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clUnloadCompiler() -> cl_int;
}
extern "C" {
    pub fn clGetExtensionFunctionAddress(arg1: *const ::libc::c_char) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn clCreateCommandQueue(
        arg1: cl_context,
        arg2: cl_device_id,
        arg3: cl_command_queue_properties,
        arg4: *mut cl_int,
    ) -> cl_command_queue;
}
extern "C" {
    pub fn clCreateSampler(
        arg1: cl_context,
        arg2: cl_bool,
        arg3: cl_addressing_mode,
        arg4: cl_filter_mode,
        arg5: *mut cl_int,
    ) -> cl_sampler;
}
extern "C" {
    pub fn clEnqueueTask(
        arg1: cl_command_queue,
        arg2: cl_kernel,
        arg3: cl_uint,
        arg4: *const cl_event,
        arg5: *mut cl_event,
    ) -> cl_int;
}
pub type cl_gl_object_type = cl_uint;
pub type cl_gl_texture_info = cl_uint;
pub type cl_gl_platform_info = cl_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GLsync {
    _unused: [u8; 0],
}
pub type cl_GLsync = *mut __GLsync;
extern "C" {
    pub fn clCreateFromGLBuffer(
        arg1: cl_context,
        arg2: cl_mem_flags,
        arg3: cl_GLuint,
        arg4: *mut ::libc::c_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreateFromGLTexture(
        arg1: cl_context,
        arg2: cl_mem_flags,
        arg3: cl_GLenum,
        arg4: cl_GLint,
        arg5: cl_GLuint,
        arg6: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreateFromGLRenderbuffer(
        arg1: cl_context,
        arg2: cl_mem_flags,
        arg3: cl_GLuint,
        arg4: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clGetGLObjectInfo(
        arg1: cl_mem,
        arg2: *mut cl_gl_object_type,
        arg3: *mut cl_GLuint,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetGLTextureInfo(
        arg1: cl_mem,
        arg2: cl_gl_texture_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueAcquireGLObjects(
        arg1: cl_command_queue,
        arg2: cl_uint,
        arg3: *const cl_mem,
        arg4: cl_uint,
        arg5: *const cl_event,
        arg6: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReleaseGLObjects(
        arg1: cl_command_queue,
        arg2: cl_uint,
        arg3: *const cl_mem,
        arg4: cl_uint,
        arg5: *const cl_event,
        arg6: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateFromGLTexture2D(
        arg1: cl_context,
        arg2: cl_mem_flags,
        arg3: cl_GLenum,
        arg4: cl_GLint,
        arg5: cl_GLuint,
        arg6: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreateFromGLTexture3D(
        arg1: cl_context,
        arg2: cl_mem_flags,
        arg3: cl_GLenum,
        arg4: cl_GLint,
        arg5: cl_GLuint,
        arg6: *mut cl_int,
    ) -> cl_mem;
}
pub type cl_gl_context_info = cl_uint;
extern "C" {
    pub fn clGetGLContextInfoKHR(
        arg1: *const cl_context_properties,
        arg2: cl_gl_context_info,
        arg3: usize,
        arg4: *mut ::libc::c_void,
        arg5: *mut usize,
    ) -> cl_int;
}
pub type clGetGLContextInfoKHR_fn = ::std::option::Option<
    unsafe extern "C" fn(
        properties: *const cl_context_properties,
        param_name: cl_gl_context_info,
        param_value_size: usize,
        param_value: *mut ::libc::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int,
>;
extern "C" {
    pub fn clCreateEventFromGLsyncKHR(
        arg1: cl_context,
        arg2: cl_GLsync,
        arg3: *mut cl_int,
    ) -> cl_event;
}
extern "C" {
    pub fn clSetMemObjectDestructorAPPLE(
        arg1: cl_mem,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: cl_mem, arg2: *mut ::libc::c_void)>,
        arg3: *mut ::libc::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clLogMessagesToSystemLogAPPLE(
        arg1: *const ::libc::c_char,
        arg2: *const ::libc::c_void,
        arg3: usize,
        arg4: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn clLogMessagesToStdoutAPPLE(
        arg1: *const ::libc::c_char,
        arg2: *const ::libc::c_void,
        arg3: usize,
        arg4: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn clLogMessagesToStderrAPPLE(
        arg1: *const ::libc::c_char,
        arg2: *const ::libc::c_void,
        arg3: usize,
        arg4: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn clIcdGetPlatformIDsKHR(
        arg1: cl_uint,
        arg2: *mut cl_platform_id,
        arg3: *mut cl_uint,
    ) -> cl_int;
}
pub type clIcdGetPlatformIDsKHR_fn = ::std::option::Option<
    unsafe extern "C" fn(arg1: cl_uint, arg2: *mut cl_platform_id, arg3: *mut cl_uint) -> cl_int,
>;
extern "C" {
    pub fn clTerminateContextKHR(arg1: cl_context) -> cl_int;
}
pub type clTerminateContextKHR_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: cl_context) -> cl_int>;
pub type cl_queue_properties_khr = cl_bitfield;
extern "C" {
    pub fn clCreateCommandQueueWithPropertiesKHR(
        arg1: cl_context,
        arg2: cl_device_id,
        arg3: *const cl_queue_properties_khr,
        arg4: *mut cl_int,
    ) -> cl_command_queue;
}
pub type clCreateCommandQueueWithPropertiesKHR_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: cl_context,
        arg2: cl_device_id,
        arg3: *const cl_queue_properties_khr,
        arg4: *mut cl_int,
    ) -> cl_command_queue,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_device_topology_amd {
    pub raw: cl_device_topology_amd__bindgen_ty_1,
    pub pcie: cl_device_topology_amd__bindgen_ty_2,
    _bindgen_union_align: [u32; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_device_topology_amd__bindgen_ty_1 {
    pub type_: cl_uint,
    pub data: [cl_uint; 5usize],
}
#[test]
fn bindgen_test_layout_cl_device_topology_amd__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_device_topology_amd__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cl_device_topology_amd__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cl_device_topology_amd__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cl_device_topology_amd__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_device_topology_amd__bindgen_ty_1>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_device_topology_amd__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_device_topology_amd__bindgen_ty_1>())).data as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_device_topology_amd__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_device_topology_amd__bindgen_ty_2 {
    pub type_: cl_uint,
    pub unused: [cl_char; 17usize],
    pub bus: cl_char,
    pub device: cl_char,
    pub function: cl_char,
}
#[test]
fn bindgen_test_layout_cl_device_topology_amd__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_device_topology_amd__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cl_device_topology_amd__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cl_device_topology_amd__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cl_device_topology_amd__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_device_topology_amd__bindgen_ty_2>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_device_topology_amd__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_device_topology_amd__bindgen_ty_2>())).unused as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_device_topology_amd__bindgen_ty_2),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_device_topology_amd__bindgen_ty_2>())).bus as *const _
                as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_device_topology_amd__bindgen_ty_2),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_device_topology_amd__bindgen_ty_2>())).device as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_device_topology_amd__bindgen_ty_2),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_device_topology_amd__bindgen_ty_2>())).function as *const _
                as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_device_topology_amd__bindgen_ty_2),
            "::",
            stringify!(function)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_device_topology_amd() {
    assert_eq!(
        ::std::mem::size_of::<cl_device_topology_amd>(),
        24usize,
        concat!("Size of: ", stringify!(cl_device_topology_amd))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_device_topology_amd>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_device_topology_amd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_device_topology_amd>())).raw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_device_topology_amd),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_device_topology_amd>())).pcie as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_device_topology_amd),
            "::",
            stringify!(pcie)
        )
    );
}
extern "C" {
    pub fn clReleaseDeviceEXT(arg1: cl_device_id) -> cl_int;
}
pub type clReleaseDeviceEXT_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: cl_device_id) -> cl_int>;
extern "C" {
    pub fn clRetainDeviceEXT(arg1: cl_device_id) -> cl_int;
}
pub type clRetainDeviceEXT_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: cl_device_id) -> cl_int>;
pub type cl_device_partition_property_ext = cl_ulong;
extern "C" {
    pub fn clCreateSubDevicesEXT(
        arg1: cl_device_id,
        arg2: *const cl_device_partition_property_ext,
        arg3: cl_uint,
        arg4: *mut cl_device_id,
        arg5: *mut cl_uint,
    ) -> cl_int;
}
pub type clCreateSubDevicesEXT_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: cl_device_id,
        arg2: *const cl_device_partition_property_ext,
        arg3: cl_uint,
        arg4: *mut cl_device_id,
        arg5: *mut cl_uint,
    ) -> cl_int,
>;
pub type cl_image_pitch_info_qcom = cl_uint;
extern "C" {
    pub fn clGetDeviceImageInfoQCOM(
        device: cl_device_id,
        image_width: usize,
        image_height: usize,
        image_format: *const cl_image_format,
        param_name: cl_image_pitch_info_qcom,
        param_value_size: usize,
        param_value: *mut ::libc::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_mem_ext_host_ptr {
    pub allocation_type: cl_uint,
    pub host_cache_policy: cl_uint,
}
#[test]
fn bindgen_test_layout__cl_mem_ext_host_ptr() {
    assert_eq!(
        ::std::mem::size_of::<_cl_mem_ext_host_ptr>(),
        8usize,
        concat!("Size of: ", stringify!(_cl_mem_ext_host_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_mem_ext_host_ptr>(),
        4usize,
        concat!("Alignment of ", stringify!(_cl_mem_ext_host_ptr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cl_mem_ext_host_ptr>())).allocation_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_mem_ext_host_ptr),
            "::",
            stringify!(allocation_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cl_mem_ext_host_ptr>())).host_cache_policy as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_mem_ext_host_ptr),
            "::",
            stringify!(host_cache_policy)
        )
    );
}
pub type cl_mem_ext_host_ptr = _cl_mem_ext_host_ptr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_mem_ion_host_ptr {
    pub ext_host_ptr: cl_mem_ext_host_ptr,
    pub ion_filedesc: ::libc::c_int,
    pub ion_hostptr: *mut ::libc::c_void,
}
#[test]
fn bindgen_test_layout__cl_mem_ion_host_ptr() {
    assert_eq!(
        ::std::mem::size_of::<_cl_mem_ion_host_ptr>(),
        24usize,
        concat!("Size of: ", stringify!(_cl_mem_ion_host_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_mem_ion_host_ptr>(),
        8usize,
        concat!("Alignment of ", stringify!(_cl_mem_ion_host_ptr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cl_mem_ion_host_ptr>())).ext_host_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_mem_ion_host_ptr),
            "::",
            stringify!(ext_host_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cl_mem_ion_host_ptr>())).ion_filedesc as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_mem_ion_host_ptr),
            "::",
            stringify!(ion_filedesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cl_mem_ion_host_ptr>())).ion_hostptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_mem_ion_host_ptr),
            "::",
            stringify!(ion_hostptr)
        )
    );
}
pub type cl_mem_ion_host_ptr = _cl_mem_ion_host_ptr;
extern "C" {
    pub fn clEnqueueAcquireGrallocObjectsIMG(
        arg1: cl_command_queue,
        arg2: cl_uint,
        arg3: *const cl_mem,
        arg4: cl_uint,
        arg5: *const cl_event,
        arg6: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReleaseGrallocObjectsIMG(
        arg1: cl_command_queue,
        arg2: cl_uint,
        arg3: *const cl_mem,
        arg4: cl_uint,
        arg5: *const cl_event,
        arg6: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetKernelSubGroupInfoKHR(
        arg1: cl_kernel,
        arg2: cl_device_id,
        arg3: cl_kernel_sub_group_info,
        arg4: usize,
        arg5: *const ::libc::c_void,
        arg6: usize,
        arg7: *mut ::libc::c_void,
        arg8: *mut usize,
    ) -> cl_int;
}
pub type clGetKernelSubGroupInfoKHR_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: cl_kernel,
        arg2: cl_device_id,
        arg3: cl_kernel_sub_group_info,
        arg4: usize,
        arg5: *const ::libc::c_void,
        arg6: usize,
        arg7: *mut ::libc::c_void,
        arg8: *mut usize,
    ) -> cl_int,
>;
pub type cl_queue_priority_khr = cl_uint;
pub type cl_queue_throttle_khr = cl_uint;
pub type cl_import_properties_arm = isize;
extern "C" {
    pub fn clImportMemoryARM(
        context: cl_context,
        flags: cl_mem_flags,
        properties: *const cl_import_properties_arm,
        memory: *mut ::libc::c_void,
        size: usize,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
pub type cl_svm_mem_flags_arm = cl_bitfield;
pub type cl_kernel_exec_info_arm = cl_uint;
pub type cl_device_svm_capabilities_arm = cl_bitfield;
extern "C" {
    pub fn clSVMAllocARM(
        arg1: cl_context,
        arg2: cl_svm_mem_flags_arm,
        arg3: usize,
        arg4: cl_uint,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn clSVMFreeARM(arg1: cl_context, arg2: *mut ::libc::c_void);
}
extern "C" {
    pub fn clEnqueueSVMFreeARM(
        arg1: cl_command_queue,
        arg2: cl_uint,
        arg3: *mut *mut ::libc::c_void,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: cl_command_queue,
                arg2: cl_uint,
                arg3: *mut *mut ::libc::c_void,
                arg4: *mut ::libc::c_void,
            ),
        >,
        arg5: *mut ::libc::c_void,
        arg6: cl_uint,
        arg7: *const cl_event,
        arg8: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMMemcpyARM(
        arg1: cl_command_queue,
        arg2: cl_bool,
        arg3: *mut ::libc::c_void,
        arg4: *const ::libc::c_void,
        arg5: usize,
        arg6: cl_uint,
        arg7: *const cl_event,
        arg8: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMMemFillARM(
        arg1: cl_command_queue,
        arg2: *mut ::libc::c_void,
        arg3: *const ::libc::c_void,
        arg4: usize,
        arg5: usize,
        arg6: cl_uint,
        arg7: *const cl_event,
        arg8: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMMapARM(
        arg1: cl_command_queue,
        arg2: cl_bool,
        arg3: cl_map_flags,
        arg4: *mut ::libc::c_void,
        arg5: usize,
        arg6: cl_uint,
        arg7: *const cl_event,
        arg8: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMUnmapARM(
        arg1: cl_command_queue,
        arg2: *mut ::libc::c_void,
        arg3: cl_uint,
        arg4: *const cl_event,
        arg5: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clSetKernelArgSVMPointerARM(
        arg1: cl_kernel,
        arg2: cl_uint,
        arg3: *const ::libc::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clSetKernelExecInfoARM(
        arg1: cl_kernel,
        arg2: cl_kernel_exec_info_arm,
        arg3: usize,
        arg4: *const ::libc::c_void,
    ) -> cl_int;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CLBlastStatusCode_ {
    CLBlastSuccess = 0,
    CLBlastOpenCLCompilerNotAvailable = -3,
    CLBlastTempBufferAllocFailure = -4,
    CLBlastOpenCLOutOfResources = -5,
    CLBlastOpenCLOutOfHostMemory = -6,
    CLBlastOpenCLBuildProgramFailure = -11,
    CLBlastInvalidValue = -30,
    CLBlastInvalidCommandQueue = -36,
    CLBlastInvalidMemObject = -38,
    CLBlastInvalidBinary = -42,
    CLBlastInvalidBuildOptions = -43,
    CLBlastInvalidProgram = -44,
    CLBlastInvalidProgramExecutable = -45,
    CLBlastInvalidKernelName = -46,
    CLBlastInvalidKernelDefinition = -47,
    CLBlastInvalidKernel = -48,
    CLBlastInvalidArgIndex = -49,
    CLBlastInvalidArgValue = -50,
    CLBlastInvalidArgSize = -51,
    CLBlastInvalidKernelArgs = -52,
    CLBlastInvalidLocalNumDimensions = -53,
    CLBlastInvalidLocalThreadsTotal = -54,
    CLBlastInvalidLocalThreadsDim = -55,
    CLBlastInvalidGlobalOffset = -56,
    CLBlastInvalidEventWaitList = -57,
    CLBlastInvalidEvent = -58,
    CLBlastInvalidOperation = -59,
    CLBlastInvalidBufferSize = -61,
    CLBlastInvalidGlobalWorkSize = -63,
    CLBlastNotImplemented = -1024,
    CLBlastInvalidMatrixA = -1022,
    CLBlastInvalidMatrixB = -1021,
    CLBlastInvalidMatrixC = -1020,
    CLBlastInvalidVectorX = -1019,
    CLBlastInvalidVectorY = -1018,
    CLBlastInvalidDimension = -1017,
    CLBlastInvalidLeadDimA = -1016,
    CLBlastInvalidLeadDimB = -1015,
    CLBlastInvalidLeadDimC = -1014,
    CLBlastInvalidIncrementX = -1013,
    CLBlastInvalidIncrementY = -1012,
    CLBlastInsufficientMemoryA = -1011,
    CLBlastInsufficientMemoryB = -1010,
    CLBlastInsufficientMemoryC = -1009,
    CLBlastInsufficientMemoryX = -1008,
    CLBlastInsufficientMemoryY = -1007,
    CLBlastInsufficientMemoryTemp = -2050,
    CLBlastInvalidBatchCount = -2049,
    CLBlastInvalidOverrideKernel = -2048,
    CLBlastMissingOverrideParameter = -2047,
    CLBlastInvalidLocalMemUsage = -2046,
    CLBlastNoHalfPrecision = -2045,
    CLBlastNoDoublePrecision = -2044,
    CLBlastInvalidVectorScalar = -2043,
    CLBlastInsufficientMemoryScalar = -2042,
    CLBlastDatabaseError = -2041,
    CLBlastUnknownError = -2040,
    CLBlastUnexpectedError = -2039,
}
pub use self::CLBlastStatusCode_ as CLBlastStatusCode;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CLBlastLayout_ {
    CLBlastLayoutRowMajor = 101,
    CLBlastLayoutColMajor = 102,
}
pub use self::CLBlastLayout_ as CLBlastLayout;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CLBlastTranspose_ {
    CLBlastTransposeNo = 111,
    CLBlastTransposeYes = 112,
    CLBlastTransposeConjugate = 113,
}
pub use self::CLBlastTranspose_ as CLBlastTranspose;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CLBlastTriangle_ {
    CLBlastTriangleUpper = 121,
    CLBlastTriangleLower = 122,
}
pub use self::CLBlastTriangle_ as CLBlastTriangle;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CLBlastDiagonal_ {
    CLBlastDiagonalNonUnit = 131,
    CLBlastDiagonalUnit = 132,
}
pub use self::CLBlastDiagonal_ as CLBlastDiagonal;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CLBlastSide_ {
    CLBlastSideLeft = 141,
    CLBlastSideRight = 142,
}
pub use self::CLBlastSide_ as CLBlastSide;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CLBlastKernelMode_ {
    CLBlastKernelModeCrossCorrelation = 151,
    CLBlastKernelModeConvolution = 152,
}
pub use self::CLBlastKernelMode_ as CLBlastKernelMode;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CLBlastPrecision_ {
    CLBlastPrecisionHalf = 16,
    CLBlastPrecisionSingle = 32,
    CLBlastPrecisionDouble = 64,
    CLBlastPrecisionComplexSingle = 3232,
    CLBlastPrecisionComplexDouble = 6464,
}
pub use self::CLBlastPrecision_ as CLBlastPrecision;
extern "C" {
    pub fn CLBlastSrotg(
        sa_buffer: cl_mem,
        sa_offset: usize,
        sb_buffer: cl_mem,
        sb_offset: usize,
        sc_buffer: cl_mem,
        sc_offset: usize,
        ss_buffer: cl_mem,
        ss_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDrotg(
        sa_buffer: cl_mem,
        sa_offset: usize,
        sb_buffer: cl_mem,
        sb_offset: usize,
        sc_buffer: cl_mem,
        sc_offset: usize,
        ss_buffer: cl_mem,
        ss_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSrotmg(
        sd1_buffer: cl_mem,
        sd1_offset: usize,
        sd2_buffer: cl_mem,
        sd2_offset: usize,
        sx1_buffer: cl_mem,
        sx1_offset: usize,
        sy1_buffer: cl_mem,
        sy1_offset: usize,
        sparam_buffer: cl_mem,
        sparam_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDrotmg(
        sd1_buffer: cl_mem,
        sd1_offset: usize,
        sd2_buffer: cl_mem,
        sd2_offset: usize,
        sx1_buffer: cl_mem,
        sx1_offset: usize,
        sy1_buffer: cl_mem,
        sy1_offset: usize,
        sparam_buffer: cl_mem,
        sparam_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSrot(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        cos: f32,
        sin: f32,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDrot(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        cos: f64,
        sin: f64,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSrotm(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        sparam_buffer: cl_mem,
        sparam_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDrotm(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        sparam_buffer: cl_mem,
        sparam_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSswap(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDswap(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCswap(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZswap(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHswap(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSscal(
        n: usize,
        alpha: f32,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDscal(
        n: usize,
        alpha: f64,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCscal(
        n: usize,
        alpha: cl_float2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZscal(
        n: usize,
        alpha: cl_double2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHscal(
        n: usize,
        alpha: cl_half,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastScopy(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDcopy(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCcopy(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZcopy(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHcopy(
        n: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSaxpy(
        n: usize,
        alpha: f32,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDaxpy(
        n: usize,
        alpha: f64,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCaxpy(
        n: usize,
        alpha: cl_float2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZaxpy(
        n: usize,
        alpha: cl_double2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHaxpy(
        n: usize,
        alpha: cl_half,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSdot(
        n: usize,
        dot_buffer: cl_mem,
        dot_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDdot(
        n: usize,
        dot_buffer: cl_mem,
        dot_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHdot(
        n: usize,
        dot_buffer: cl_mem,
        dot_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCdotu(
        n: usize,
        dot_buffer: cl_mem,
        dot_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZdotu(
        n: usize,
        dot_buffer: cl_mem,
        dot_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCdotc(
        n: usize,
        dot_buffer: cl_mem,
        dot_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZdotc(
        n: usize,
        dot_buffer: cl_mem,
        dot_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSnrm2(
        n: usize,
        nrm2_buffer: cl_mem,
        nrm2_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDnrm2(
        n: usize,
        nrm2_buffer: cl_mem,
        nrm2_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastScnrm2(
        n: usize,
        nrm2_buffer: cl_mem,
        nrm2_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDznrm2(
        n: usize,
        nrm2_buffer: cl_mem,
        nrm2_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHnrm2(
        n: usize,
        nrm2_buffer: cl_mem,
        nrm2_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSasum(
        n: usize,
        asum_buffer: cl_mem,
        asum_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDasum(
        n: usize,
        asum_buffer: cl_mem,
        asum_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastScasum(
        n: usize,
        asum_buffer: cl_mem,
        asum_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDzasum(
        n: usize,
        asum_buffer: cl_mem,
        asum_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHasum(
        n: usize,
        asum_buffer: cl_mem,
        asum_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSsum(
        n: usize,
        sum_buffer: cl_mem,
        sum_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDsum(
        n: usize,
        sum_buffer: cl_mem,
        sum_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastScsum(
        n: usize,
        sum_buffer: cl_mem,
        sum_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDzsum(
        n: usize,
        sum_buffer: cl_mem,
        sum_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHsum(
        n: usize,
        sum_buffer: cl_mem,
        sum_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiSamax(
        n: usize,
        imax_buffer: cl_mem,
        imax_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiDamax(
        n: usize,
        imax_buffer: cl_mem,
        imax_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiCamax(
        n: usize,
        imax_buffer: cl_mem,
        imax_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiZamax(
        n: usize,
        imax_buffer: cl_mem,
        imax_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiHamax(
        n: usize,
        imax_buffer: cl_mem,
        imax_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiSamin(
        n: usize,
        imin_buffer: cl_mem,
        imin_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiDamin(
        n: usize,
        imin_buffer: cl_mem,
        imin_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiCamin(
        n: usize,
        imin_buffer: cl_mem,
        imin_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiZamin(
        n: usize,
        imin_buffer: cl_mem,
        imin_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiHamin(
        n: usize,
        imin_buffer: cl_mem,
        imin_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiSmax(
        n: usize,
        imax_buffer: cl_mem,
        imax_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiDmax(
        n: usize,
        imax_buffer: cl_mem,
        imax_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiCmax(
        n: usize,
        imax_buffer: cl_mem,
        imax_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiZmax(
        n: usize,
        imax_buffer: cl_mem,
        imax_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiHmax(
        n: usize,
        imax_buffer: cl_mem,
        imax_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiSmin(
        n: usize,
        imin_buffer: cl_mem,
        imin_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiDmin(
        n: usize,
        imin_buffer: cl_mem,
        imin_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiCmin(
        n: usize,
        imin_buffer: cl_mem,
        imin_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiZmin(
        n: usize,
        imin_buffer: cl_mem,
        imin_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastiHmin(
        n: usize,
        imin_buffer: cl_mem,
        imin_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSgemv(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: f32,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDgemv(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: f64,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCgemv(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_float2,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZgemv(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_double2,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHgemv(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_half,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSgbmv(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        kl: usize,
        ku: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: f32,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDgbmv(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        kl: usize,
        ku: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: f64,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCgbmv(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        kl: usize,
        ku: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_float2,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZgbmv(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        kl: usize,
        ku: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_double2,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHgbmv(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        kl: usize,
        ku: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_half,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastChemv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_float2,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZhemv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_double2,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastChbmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        k: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_float2,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZhbmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        k: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_double2,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastChpmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_float2,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_float2,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZhpmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_double2,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_double2,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSsymv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: f32,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDsymv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: f64,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHsymv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_half,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSsbmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        k: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: f32,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDsbmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        k: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: f64,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHsbmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        k: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_half,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSspmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f32,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: f32,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDspmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f64,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: f64,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHspmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_half,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        beta: cl_half,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastStrmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDtrmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCtrmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZtrmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHtrmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastStbmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        k: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDtbmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        k: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCtbmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        k: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZtbmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        k: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHtbmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        k: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastStpmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDtpmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCtpmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZtpmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHtpmv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastStrsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDtrsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCtrsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZtrsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastStbsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        k: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDtbsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        k: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCtbsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        k: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZtbsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        k: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastStpsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDtpsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCtpsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZtpsv(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        n: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSger(
        layout: CLBlastLayout,
        m: usize,
        n: usize,
        alpha: f32,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDger(
        layout: CLBlastLayout,
        m: usize,
        n: usize,
        alpha: f64,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHger(
        layout: CLBlastLayout,
        m: usize,
        n: usize,
        alpha: cl_half,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCgeru(
        layout: CLBlastLayout,
        m: usize,
        n: usize,
        alpha: cl_float2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZgeru(
        layout: CLBlastLayout,
        m: usize,
        n: usize,
        alpha: cl_double2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCgerc(
        layout: CLBlastLayout,
        m: usize,
        n: usize,
        alpha: cl_float2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZgerc(
        layout: CLBlastLayout,
        m: usize,
        n: usize,
        alpha: cl_double2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCher(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f32,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZher(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f64,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastChpr(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f32,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZhpr(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f64,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCher2(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_float2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZher2(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_double2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastChpr2(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_float2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZhpr2(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_double2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSsyr(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f32,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDsyr(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f64,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHsyr(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_half,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSspr(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f32,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDspr(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f64,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHspr(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_half,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSsyr2(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f32,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDsyr2(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f64,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHsyr2(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_half,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSspr2(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f32,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDspr2(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: f64,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHspr2(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        n: usize,
        alpha: cl_half,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        ap_buffer: cl_mem,
        ap_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSgemm(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: f32,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDgemm(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: f64,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCgemm(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_float2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZgemm(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_double2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHgemm(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_half,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSsymm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        m: usize,
        n: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: f32,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDsymm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        m: usize,
        n: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: f64,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCsymm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        m: usize,
        n: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_float2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZsymm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        m: usize,
        n: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_double2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHsymm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        m: usize,
        n: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_half,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastChemm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        m: usize,
        n: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_float2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZhemm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        m: usize,
        n: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_double2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSsyrk(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        beta: f32,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDsyrk(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        beta: f64,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCsyrk(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        beta: cl_float2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZsyrk(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        beta: cl_double2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHsyrk(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        beta: cl_half,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCherk(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        beta: f32,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZherk(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        beta: f64,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSsyr2k(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        ab_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: f32,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDsyr2k(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        ab_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: f64,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCsyr2k(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        ab_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_float2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZsyr2k(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        ab_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_double2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHsyr2k(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        ab_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_half,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCher2k(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        ab_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: f32,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZher2k(
        layout: CLBlastLayout,
        triangle: CLBlastTriangle,
        ab_transpose: CLBlastTranspose,
        n: usize,
        k: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: f64,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastStrmm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        m: usize,
        n: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDtrmm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        m: usize,
        n: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCtrmm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        m: usize,
        n: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZtrmm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        m: usize,
        n: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHtrmm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        m: usize,
        n: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastStrsm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        m: usize,
        n: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDtrsm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        m: usize,
        n: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCtrsm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        m: usize,
        n: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZtrsm(
        layout: CLBlastLayout,
        side: CLBlastSide,
        triangle: CLBlastTriangle,
        a_transpose: CLBlastTranspose,
        diagonal: CLBlastDiagonal,
        m: usize,
        n: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastShad(
        n: usize,
        alpha: f32,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        beta: f32,
        z_buffer: cl_mem,
        z_offset: usize,
        z_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDhad(
        n: usize,
        alpha: f64,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        beta: f64,
        z_buffer: cl_mem,
        z_offset: usize,
        z_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastChad(
        n: usize,
        alpha: cl_float2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        beta: cl_float2,
        z_buffer: cl_mem,
        z_offset: usize,
        z_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZhad(
        n: usize,
        alpha: cl_double2,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        beta: cl_double2,
        z_buffer: cl_mem,
        z_offset: usize,
        z_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHhad(
        n: usize,
        alpha: cl_half,
        x_buffer: cl_mem,
        x_offset: usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offset: usize,
        y_inc: usize,
        beta: cl_half,
        z_buffer: cl_mem,
        z_offset: usize,
        z_inc: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSomatcopy(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDomatcopy(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastComatcopy(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZomatcopy(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHomatcopy(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSim2col(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        col_buffer: cl_mem,
        col_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDim2col(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        col_buffer: cl_mem,
        col_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCim2col(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        col_buffer: cl_mem,
        col_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZim2col(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        col_buffer: cl_mem,
        col_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHim2col(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        col_buffer: cl_mem,
        col_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastScol2im(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        col_buffer: cl_mem,
        col_offset: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDcol2im(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        col_buffer: cl_mem,
        col_offset: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCcol2im(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        col_buffer: cl_mem,
        col_offset: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZcol2im(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        col_buffer: cl_mem,
        col_offset: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHcol2im(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        col_buffer: cl_mem,
        col_offset: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSconvgemm(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        num_kernels: usize,
        batch_count: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        kernel_buffer: cl_mem,
        kernel_offset: usize,
        result_buffer: cl_mem,
        result_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDconvgemm(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        num_kernels: usize,
        batch_count: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        kernel_buffer: cl_mem,
        kernel_offset: usize,
        result_buffer: cl_mem,
        result_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHconvgemm(
        kernel_mode: CLBlastKernelMode,
        channels: usize,
        height: usize,
        width: usize,
        kernel_h: usize,
        kernel_w: usize,
        pad_h: usize,
        pad_w: usize,
        stride_h: usize,
        stride_w: usize,
        dilation_h: usize,
        dilation_w: usize,
        num_kernels: usize,
        batch_count: usize,
        im_buffer: cl_mem,
        im_offset: usize,
        kernel_buffer: cl_mem,
        kernel_offset: usize,
        result_buffer: cl_mem,
        result_offset: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSaxpyBatched(
        n: usize,
        alphas: *const f32,
        x_buffer: cl_mem,
        x_offsets: *const usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offsets: *const usize,
        y_inc: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDaxpyBatched(
        n: usize,
        alphas: *const f64,
        x_buffer: cl_mem,
        x_offsets: *const usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offsets: *const usize,
        y_inc: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCaxpyBatched(
        n: usize,
        alphas: *const cl_float2,
        x_buffer: cl_mem,
        x_offsets: *const usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offsets: *const usize,
        y_inc: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZaxpyBatched(
        n: usize,
        alphas: *const cl_double2,
        x_buffer: cl_mem,
        x_offsets: *const usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offsets: *const usize,
        y_inc: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHaxpyBatched(
        n: usize,
        alphas: *const cl_half,
        x_buffer: cl_mem,
        x_offsets: *const usize,
        x_inc: usize,
        y_buffer: cl_mem,
        y_offsets: *const usize,
        y_inc: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSgemmBatched(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alphas: *const f32,
        a_buffer: cl_mem,
        a_offsets: *const usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offsets: *const usize,
        b_ld: usize,
        betas: *const f32,
        c_buffer: cl_mem,
        c_offsets: *const usize,
        c_ld: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDgemmBatched(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alphas: *const f64,
        a_buffer: cl_mem,
        a_offsets: *const usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offsets: *const usize,
        b_ld: usize,
        betas: *const f64,
        c_buffer: cl_mem,
        c_offsets: *const usize,
        c_ld: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCgemmBatched(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alphas: *const cl_float2,
        a_buffer: cl_mem,
        a_offsets: *const usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offsets: *const usize,
        b_ld: usize,
        betas: *const cl_float2,
        c_buffer: cl_mem,
        c_offsets: *const usize,
        c_ld: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZgemmBatched(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alphas: *const cl_double2,
        a_buffer: cl_mem,
        a_offsets: *const usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offsets: *const usize,
        b_ld: usize,
        betas: *const cl_double2,
        c_buffer: cl_mem,
        c_offsets: *const usize,
        c_ld: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHgemmBatched(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alphas: *const cl_half,
        a_buffer: cl_mem,
        a_offsets: *const usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offsets: *const usize,
        b_ld: usize,
        betas: *const cl_half,
        c_buffer: cl_mem,
        c_offsets: *const usize,
        c_ld: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSgemmStridedBatched(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        a_stride: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        b_stride: usize,
        beta: f32,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        c_stride: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDgemmStridedBatched(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        a_stride: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        b_stride: usize,
        beta: f64,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        c_stride: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCgemmStridedBatched(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        a_stride: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        b_stride: usize,
        beta: cl_float2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        c_stride: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZgemmStridedBatched(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        a_stride: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        b_stride: usize,
        beta: cl_double2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        c_stride: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHgemmStridedBatched(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        a_stride: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        b_stride: usize,
        beta: cl_half,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        c_stride: usize,
        batch_count: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSgemmWithTempBuffer(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: f32,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: f32,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
        temp_buffer: cl_mem,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDgemmWithTempBuffer(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: f64,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: f64,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
        temp_buffer: cl_mem,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCgemmWithTempBuffer(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: cl_float2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_float2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
        temp_buffer: cl_mem,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZgemmWithTempBuffer(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: cl_double2,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_double2,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
        temp_buffer: cl_mem,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHgemmWithTempBuffer(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        alpha: cl_half,
        a_buffer: cl_mem,
        a_offset: usize,
        a_ld: usize,
        b_buffer: cl_mem,
        b_offset: usize,
        b_ld: usize,
        beta: cl_half,
        c_buffer: cl_mem,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        event: *mut cl_event,
        temp_buffer: cl_mem,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastSGemmTempBufferSize(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        a_offset: usize,
        a_ld: usize,
        b_offset: usize,
        b_ld: usize,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        temp_buffer_size: *mut usize,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastDGemmTempBufferSize(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        a_offset: usize,
        a_ld: usize,
        b_offset: usize,
        b_ld: usize,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        temp_buffer_size: *mut usize,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastCGemmTempBufferSize(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        a_offset: usize,
        a_ld: usize,
        b_offset: usize,
        b_ld: usize,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        temp_buffer_size: *mut usize,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastZGemmTempBufferSize(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        a_offset: usize,
        a_ld: usize,
        b_offset: usize,
        b_ld: usize,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        temp_buffer_size: *mut usize,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastHGemmTempBufferSize(
        layout: CLBlastLayout,
        a_transpose: CLBlastTranspose,
        b_transpose: CLBlastTranspose,
        m: usize,
        n: usize,
        k: usize,
        a_offset: usize,
        a_ld: usize,
        b_offset: usize,
        b_ld: usize,
        c_offset: usize,
        c_ld: usize,
        queue: *mut cl_command_queue,
        temp_buffer_size: *mut usize,
    ) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastClearCache() -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastFillCache(device: cl_device_id) -> CLBlastStatusCode;
}
extern "C" {
    pub fn CLBlastOverrideParameters(
        device: cl_device_id,
        kernel_name: *const ::libc::c_char,
        precision: CLBlastPrecision,
        num_parameters: usize,
        parameters_names: *mut *const ::libc::c_char,
        parameters_values: *const usize,
    ) -> CLBlastStatusCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
